{"version":3,"file":"mpcCoreKit.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/helper/browserStorage.ts","../src/helper/factorSerialization.ts","../src/point.ts","../src/helper/securityQuestion.ts","../src/interfaces.ts","../src/mpcCoreKit.ts"],"sourcesContent":["import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","import { getPubKeyPoint, Point, Point as TkeyPoint, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nasync function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: Point[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: Point,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[]\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport async function deleteFactorAndRefresh(tKey: ThresholdKey, factorPubToDelete: Point, factorKeyForExistingTSSShare: BN, signatures: string[]) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { ICoreKit, IStorage, SupportedStorageType, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport type { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  /**\n   * Creates a new Point from a private Key.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\" | \"react-native\";\n\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport interface InitParams {\n  handleRedirectResult: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = SubVerifierDetailsParams | AggregateVerifierLoginParams;\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: SupportedStorageType;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `Web3AuthOptions.web3AuthClientId`\n   * Overwrites the default value ( clientId ) used as nonce for hashing the hash factor key.\n   *\n   * If you want to aggregate the mfa status of client id 1 and client id 2  apps\n   * set hashedFactorNonce to some common clientID, which can be either client id 1 or client id 2 or any other unique string\n   * #PR 72\n   * Do not use this unless you know what you are doing.\n   */\n  hashedFactorNonce?: string;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport { BNString, encrypt, getPubKeyPoint, Point as TkeyPoint, SHARE_DELETED, ShareStore, StringifiedType } from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport type { UX_MODE_TYPE } from \"@toruslabs/customauth/dist/types/utils/enums\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CoreKitMode,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n    const isNodejsOrRN = this.isNodejsOrRN(options.uxMode);\n    if (isNodejsOrRN && [\"local\", \"session\"].includes(options.storageKey.toString())) {\n      throw new Error(`nodejs mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (isNodejsOrRN && !options.tssLib) {\n      throw new Error(`nodejs mode requires tssLib`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = isNodejsOrRN ? \"https://localhost\" : `${window?.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.hashedFactorNonce) options.hashedFactorNonce = options.web3AuthClientId;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || !this.state.factorKey) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl,\n        uxMode: this.isNodejsOrRN(this.options.uxMode) ? UX_MODE.REDIRECT : (this.options.uxMode as UX_MODE_TYPE),\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (this.sessionManager.sessionId) {\n      await this.rehydrateSession();\n      if (this.state.factorKey) await this.setupProvider();\n    }\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams): Promise<void> {\n    this.checkReady();\n    if (this.isNodejsOrRN(this.options.uxMode)) throw new Error(`Oauth login is NOT supported in ${this.options.uxMode}`);\n\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void> {\n    this.checkReady();\n\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    try {\n      let browserData;\n\n      if (this.isNodejsOrRN(this.options.uxMode)) {\n        browserData = {\n          browserName: \"Node Env\",\n          browserVersion: \"\",\n          deviceName: \"nodejs\",\n        };\n      } else {\n        // try {\n        const browserInfo = bowser.parse(navigator.userAgent);\n        const browserName = `${browserInfo.browser.name}`;\n        browserData = {\n          browserName,\n          browserVersion: browserInfo.browser.version,\n          deviceName: browserInfo.os.name,\n        };\n      }\n      const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n      storeWebBrowserFactor(deviceFactorKey, this);\n      await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n      const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n      await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n      await this.deleteMetadataShareBackup(hashedFactorKey);\n\n      // only recovery factor = true\n      if (recoveryFactor) {\n        const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n        return backupFactorKey;\n      }\n      // update to undefined for next major release\n      return \"\";\n    } catch (err: unknown) {\n      log.error(\"error enabling MFA\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return tssPubKey;\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    // if (this.state.remoteClient) {\n    //   return this.remoteSign(msgHash);\n    // }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    let { tssShareIndex, tssPubKey } = this.state;\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.isNodejsOrRN(this.options.uxMode)) {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n    const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n    if (fpp.equals(stateFpp)) {\n      throw new Error(\"Cannot delete current active factor\");\n    }\n\n    await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, this.signatures);\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(): Promise<void> {\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      }\n      const deviceTSSShare = new BN(generatePrivate());\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession() {\n    try {\n      this.checkReady();\n\n      if (!this.sessionManager.sessionId) return {};\n      const result = await this.sessionManager.authorizeSession();\n      const factorKey = new BN(result.factorKey, \"hex\");\n      if (!factorKey) {\n        throw new Error(\"Invalid factor key\");\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n      });\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey } = this.state;\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n        throw new Error(\"User not logged in\");\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n      };\n      await this.sessionManager.createSession(payload);\n      this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n      // Generate new share.\n      await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, this.signatures);\n\n      // Update local share.\n      const { tssIndex } = await this.tKey.getTSSShare(this.state.factorKey);\n      this.updateState({\n        tssShareIndex: tssIndex,\n      });\n      return;\n    }\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc: await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare)),\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.tkey = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    log.info(\"data\", data);\n    return this.signatures;\n  }\n\n  private isNodejsOrRN(params: CoreKitMode): boolean {\n    const mode = params;\n    return mode === \"nodejs\" || mode === \"react-native\";\n  }\n}\n"],"names":["DEFAULT_CHAIN_CONFIG","chainNamespace","CHAIN_NAMESPACES","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","TORUS_SAPPHIRE_NETWORK","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","EllipticCurve","MAX_FACTORS","SOCIAL_TKEY_INDEX","generateFactorKey","factorKey","BN","generatePrivate","factorPub","getPubKeyPoint","private","pub","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64Url","split","base64","replace","JSON","parse","atob","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","undefined","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","randomSelection","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","VALID_TSS_INDICES","indexOf","metadata","isArray","tssTag","existingFactorPubs","updatedFactorPubs","concat","existingTSSIndexes","fb","getFactorEncs","updatedTSSIndexes","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","slice","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","keccak256","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","MemoryStorage","constructor","_defineProperty","getItem","key","_store","value","clear","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","instance","toJSON","result","currStore","getStore","stringify","get","store","set","remove","storeWebBrowserFactor","mpcCoreKit","getMetadata","currentStorage","tkeyPubX","pubKey","toString","padStart","getWebBrowserFactor","tKeyLocalStoreString","tKeyLocalStore","mnemonicToKey","shareMnemonic","ShareSerializationModule","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","mnemonic","serializeMnemonic","ZERO_POINT","g","mul","Point","fromPrivateKey","privateKey","ep","keyFromPrivate","getPublic","fromTkeyPoint","keyFromPublic","y","fromBufferSEC1","buf","toTkeyPoint","isInfinity","getX","getY","TkeyPoint","toBufferSEC1","compressed","encode","equals","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","fromJSON","json","TssSecurityQuestion","setSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","storeData","setGeneralStoreDomain","manualSync","_syncShareMetadata","changeSecurityQuestion","newQuestion","newAnswer","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","parseInt","state","inputFactorKey","deleteFactor","deleteSecurityQuestion","deleteFactorKey","tkeyPoint","fromCompressedPub","deleteGeneralStoreDomain","recoverFactor","getQuestion","COREKIT_STATUS","Web3AuthMPCCoreKit","options","_window","checkReady","factorPubsList","tssPubKey","subarray","msgHash","localSign","tssShareIndex","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","tssNonce","getTssNonce","vid","sessionId","getTSSPubKey","tssNonces","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","isNodejsOrRN","uxMode","tssLib","default","sockets","Promise","all","setupSockets","dklsCoeff","getDKLSCoeff","denormalisedShare","umod","curve","n","share","getSigningSignatures","client","Client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","r","recoveryParam","sign","v","chainConfig","web3AuthClientId","enableLogging","log","enableAll","setLevel","web3AuthNetwork","sessionTime","UX_MODE","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","hashedFactorNonce","_storageBaseKey","sessionManager","OpenloginSessionManager","NodeDetailManager","network","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","oAuthKey","status","NOT_INITIALIZED","INITIALIZED","privKey","REQUIRED_SHARE","LOGGED_IN","e","_this$state$userInfo","_this$state3","userInfo","aggregateVerifier","_this$state4","isRedirectMode","init","_window2","_window3","handleRedirectResult","resetState","nodeDetails","torusSp","TorusServiceProvider","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","TorusStorageLayer","hostUrl","shareSerializationModule","ThresholdKey","modules","shareSerialization","skipSw","skipPrefetch","POPUP","rehydrateSession","setupProvider","loginWithOauth","tkeyServiceProvider","verifierParams","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","CoreError","code","message","loginWithJWT","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getTorusKey","verifier_id","extraVerifierParams","additionalParams","verifierType","getAggregateTorusKey","oAuthShare","verifierName","getRedirectResult","method","TORUS_METHOD","TRIGGER_LOGIN","data","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","getFactorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFA","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","bowser","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","backupFactorKey","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","remainingFactors","fpp","stateFpp","factorPubHex","allDesc","getShareDescription","keyDesc","forEach","desc","_this$tKey","deleteShareDescription","derivedFactorPub","logout","invalidateSession","tkeyDetails","factors","keyDetails","requiredFactors","requiredShares","threshold","totalFactors","shareDescriptions","metadataPubKey","commitChanges","syncLocalMetadataTransitions","setManualSync","importTssKey","tssKey","newTSSIndex","tssKeyBN","tag","importKey","_UNSAFE_exportTssKey","exportTssKey","existingUser","isMetadataPresent","deviceTSSShare","deviceTSSIndex","initialize","HashedShare","neverInitializeNewKey","createSession","authorizeSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","Object","keys","_this$tKey3","info","_this$tKey4","ShareStore","factorEncs","factorPubID","userEnc","encrypt","serverEncs","addTSSData","getMetadataShare","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","SHARE_DELETED","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","metadataShare","_this$tKey8","module","addShareDescription","signingProvider","EthereumSigningProvider","config","newState","TorusUtils","getPostboxKey","session","sig","signature","mode"],"mappings":"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"}