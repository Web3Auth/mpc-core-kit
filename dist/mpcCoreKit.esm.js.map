{"version":3,"file":"mpcCoreKit.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/helper/browserStorage.ts","../src/helper/factorSerialization.ts","../src/point.ts","../src/helper/securityQuestion.ts","../src/helper/authenticator/authenticatorService.ts","../src/helper/authenticator/smsService.ts","../src/interfaces.ts","../src/mpcCoreKit.ts"],"sourcesContent":["import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","import { FactorEnc, getPubKeyPoint, Point as TkeyPoint, PointHex, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256, StringifiedType } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\nimport { IRemoteClientState, UserInfo, Web3AuthState } from \"./interfaces\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nexport async function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: TkeyPoint[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport interface refreshRemoteTssType {\n  // from client\n  factorEnc: FactorEnc;\n\n  factorPubs: TkeyPoint[];\n  targetIndexes: number[];\n  verifierNameVerifierId: string;\n\n  tssTag: string;\n  tssCommits: TkeyPoint[];\n  tssNonce: number;\n  newTSSServerPub: TkeyPoint;\n  // nodeIndexes : number[],\n\n  serverOpts: {\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n    selectedServers: number[];\n    authSignatures: string[];\n  };\n}\nexport interface refreshRemoteTssReturnType {\n  tssTag: string;\n  tssNonce: number;\n  tssPolyCommits: TkeyPoint[];\n  factorPubs: TkeyPoint[];\n  factorEncs: {\n    [factorPubID: string]: FactorEnc;\n  };\n}\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param remoteFactorPub - Factor Pub for remote share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nexport async function remoteRefreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: TkeyPoint[],\n  tssIndices: number[],\n  signatures: string[],\n  remoteClient: IRemoteClientState,\n  updateMetadata = false\n) {\n  // const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  let finalSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n\n  const tssCommits = tKey.metadata.tssPolyCommits[tKey.tssTag];\n  const tssNonce: number = tKey.metadata.tssNonces[tKey.tssTag] || 0;\n  const { pubKey: newTSSServerPub, nodeIndexes } = await tKey.serviceProvider.getTSSPubKey(tKey.tssTag, tssNonce + 1);\n  // move to pre-refresh\n  if (nodeIndexes?.length > 0) {\n    finalSelectedServers = nodeIndexes.slice(0, Math.min(serverEndpoints.length, nodeIndexes.length));\n  }\n\n  const factorEnc = tKey.getFactorEncs(TkeyPoint.fromCompressedPub(remoteClient.remoteFactorPub));\n\n  const dataRequired = {\n    factorEnc,\n    factorPubs: factorPubs.map((pub) => pub.toJSON()),\n    targetIndexes: tssIndices,\n    verifierNameVerifierId,\n    tssTag: tKey.tssTag,\n    tssCommits: tssCommits.map((commit) => commit.toJSON()),\n    tssNonce,\n    newTSSServerPub: newTSSServerPub.toJSON(),\n    serverOpts: {\n      selectedServers: finalSelectedServers,\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n      authSignatures: signatures,\n    },\n  };\n\n  const result = (\n    await post<{ data: refreshRemoteTssReturnType }>(\n      `${remoteClient.remoteClientUrl}/api/v3/mpc/refresh_tss`,\n      { dataRequired },\n      {\n        headers: {\n          Authorization: `Bearer ${remoteClient.remoteClientToken}`,\n        },\n      }\n    )\n  ).data;\n\n  tKey.metadata.addTSSData({\n    tssTag: result.tssTag,\n    tssNonce: result.tssNonce,\n    tssPolyCommits: result.tssPolyCommits.map((commit) => TkeyPoint.fromJSON(commit)),\n    factorPubs: result.factorPubs.map((pub) => TkeyPoint.fromJSON(pub)),\n    factorEncs: result.factorEncs,\n  });\n\n  if (updateMetadata) {\n    await tKey._syncShareMetadata();\n  }\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: TkeyPoint,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  remoteClient?: IRemoteClientState\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  if (!remoteClient) {\n    await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n  } else {\n    await remoteRefreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, signatures, remoteClient);\n  }\n}\n\nexport async function deleteFactorAndRefresh(\n  tKey: ThresholdKey,\n  factorPubToDelete: TkeyPoint,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  remoteClient?: IRemoteClientState\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  if (!remoteClient) {\n    await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n  } else {\n    await remoteRefreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, signatures, remoteClient);\n  }\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n\nexport function Web3AuthStateFromJSON(result: StringifiedType): Web3AuthState {\n  if (!result.factorKey) throw new Error(\"factorKey not found in JSON\");\n  if (!result.tssShareIndex) throw new Error(\"tssShareIndex not found in JSON\");\n\n  const factorKey = new BN(result.factorKey as string, \"hex\");\n  const tssPubKey = Buffer.from(result.tssPubKey as Buffer);\n  return {\n    factorKey,\n    oAuthKey: result.oAuthKey as string,\n    tssShareIndex: parseInt(result.tssShareIndex as string),\n    tssPubKey,\n    signatures: result.signatures as string[],\n    userInfo: result.userInfo as UserInfo,\n  };\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { ICoreKit, IStorage, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","import { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { log } from \"@web3auth/base\";\nimport BN from \"bn.js\";\nimport type { ec } from \"elliptic\";\nimport base32 from \"hi-base32\";\n\nimport { CURVE } from \"../../constants\";\nimport { IRemoteClientState, Web3AuthMPCCoreKit } from \"../../index\";\n\nexport class AuthenticatorService {\n  private backendUrl: string;\n\n  private coreKitInstance: Web3AuthMPCCoreKit;\n\n  private authenticatorType: string = \"authenticator\";\n\n  private factorPub: string = \"\";\n\n  private tssIndex: number;\n\n  constructor(params: { backendUrl: string; coreKitInstance: Web3AuthMPCCoreKit; authenticatorType?: string }) {\n    const { backendUrl } = params;\n    this.backendUrl = backendUrl;\n    this.authenticatorType = params.authenticatorType || \"authenticator\";\n    this.coreKitInstance = params.coreKitInstance;\n    // this.remoteClient = remoteClient || false;\n  }\n\n  getDescriptionsAndUpdate() {\n    const arrayOfDescriptions = Object.entries(this.coreKitInstance.getKeyDetails().shareDescriptions).map(([key, value]) => {\n      const parsedDescription = (value || [])[0] ? JSON.parse(value[0]) : {};\n      return {\n        key,\n        description: parsedDescription,\n      };\n    });\n\n    const shareDescriptionsMobile = arrayOfDescriptions.find(({ description }) => description.authenticator === this.authenticatorType);\n    log.info(\"shareDescriptionsMobile\", shareDescriptionsMobile);\n\n    if (shareDescriptionsMobile) {\n      this.factorPub = shareDescriptionsMobile.key;\n      this.tssIndex = shareDescriptionsMobile.description.tssShareIndex;\n    }\n\n    return shareDescriptionsMobile;\n  }\n\n  generateSecretKey(): string {\n    const key = generatePrivate().subarray(0, 20);\n    return base32.encode(key).toString().replace(/=/g, \"\");\n  }\n\n  async register(privKey: BN, secretKey: string): Promise<{ success: boolean; message?: string }> {\n    const privKeyPair: ec.KeyPair = CURVE.keyFromPrivate(privKey.toString(16, 64));\n    const pubKey = privKeyPair.getPublic();\n    const sig = CURVE.sign(keccak256(Buffer.from(secretKey, \"utf8\")), Buffer.from(privKey.toString(16, 64), \"hex\"));\n\n    const data = {\n      pubKey: {\n        x: pubKey.getX().toString(16, 64),\n        y: pubKey.getY().toString(16, 64),\n      },\n      sig: {\n        r: sig.r.toString(16, 64),\n        s: sig.s.toString(16, 64),\n        v: new BN(sig.recoveryParam as number).toString(16, 2),\n      },\n      secretKey,\n    };\n\n    const resp = await post<{\n      success: boolean;\n      message: string;\n    }>(`${this.backendUrl}/api/v3/register`, data);\n\n    return resp;\n  }\n\n  async addRecovery(address: string, code: string, factorKey: BN) {\n    if (!factorKey) throw new Error(\"factorKey is not defined\");\n    if (!address) throw new Error(\"address is not defined\");\n    if (!code) throw new Error(\"code is not defined\");\n\n    const data = {\n      address,\n      code,\n      data: {\n        // If the verification is complete, we save the factorKey for the user address.\n        // This factorKey is used to verify the user in the future on a new device and recover tss share.\n        factorKey: factorKey.toString(16, 64),\n      },\n    };\n\n    await post(`${this.backendUrl}/api/v3/verify`, data);\n  }\n\n  async verifyRecovery(address: string, code: string): Promise<BN | undefined> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify`, verificationData);\n    const { data } = response;\n    return data ? new BN(data.factorKey, \"hex\") : undefined;\n  }\n\n  async verifyRemoteSetup(address: string, code: string): Promise<IRemoteClientState & { tssShareIndex: string }> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify_remote`, verificationData);\n    const { data } = response;\n\n    return {\n      tssShareIndex: this.tssIndex.toString(),\n      remoteClientUrl: this.backendUrl,\n      remoteFactorPub: this.factorPub,\n      metadataShare: data.metadataShare,\n      remoteClientToken: data.signature,\n    };\n  }\n}\n","import { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { log } from \"@web3auth/base\";\nimport BN from \"bn.js\";\nimport type { ec } from \"elliptic\";\n\nimport { CURVE } from \"../../constants\";\nimport { IRemoteClientState } from \"../../interfaces\";\nimport { Web3AuthMPCCoreKit } from \"../../mpcCoreKit\";\n\nexport class SmsService {\n  private backendUrl: string;\n\n  private coreKitInstance: Web3AuthMPCCoreKit;\n\n  private authenticatorType: string = \"sms\";\n\n  private factorPub: string = \"\";\n\n  private tssIndex: number;\n\n  constructor(params: { backendUrl: string; coreKitInstance: Web3AuthMPCCoreKit; authenticatorType?: string }) {\n    const { backendUrl } = params;\n    this.backendUrl = backendUrl;\n    this.authenticatorType = params.authenticatorType || \"sms\";\n    this.coreKitInstance = params.coreKitInstance;\n    this.getDescriptionsAndUpdate();\n  }\n\n  getDescriptionsAndUpdate() {\n    const arrayOfDescriptions = Object.entries(this.coreKitInstance.getKeyDetails().shareDescriptions).map(([key, value]) => {\n      const parsedDescription = (value || [])[0] ? JSON.parse(value[0]) : {};\n      return {\n        key,\n        description: parsedDescription,\n      };\n    });\n\n    const shareDescriptionsMobile = arrayOfDescriptions.find(({ description }) => description.authenticator === this.authenticatorType);\n    log.info(\"shareDescriptionsMobile\", shareDescriptionsMobile);\n\n    if (shareDescriptionsMobile) {\n      this.factorPub = shareDescriptionsMobile.key;\n      this.tssIndex = shareDescriptionsMobile.description.tssShareIndex;\n    }\n\n    return shareDescriptionsMobile;\n  }\n\n  async register(privKey: BN, number: string): Promise<string | undefined> {\n    const privKeyPair: ec.KeyPair = CURVE.keyFromPrivate(privKey.toString(16, 64));\n    const pubKey = privKeyPair.getPublic();\n    const sig = CURVE.sign(keccak256(Buffer.from(number, \"utf8\")), Buffer.from(privKey.toString(16, 64), \"hex\"));\n\n    const data = {\n      pubKey: {\n        x: pubKey.getX().toString(16, 64),\n        y: pubKey.getY().toString(16, 64),\n      },\n      sig: {\n        r: sig.r.toString(16, 64),\n        s: sig.s.toString(16, 64),\n        v: new BN(sig.recoveryParam as number).toString(16, 2),\n      },\n      number,\n    };\n\n    await post<{\n      success: boolean;\n      id_token?: string;\n      message: string;\n    }>(`${this.backendUrl}/api/v3/register`, data);\n\n    // this is to send sms to the user instantly after registration.\n    const startData = {\n      address: `${pubKey.getX().toString(16, 64)}${pubKey.getY().toString(16, 64)}`,\n    };\n\n    // Sends the user sms.\n    const resp2 = await post<{ success: boolean; code?: string }>(`${this.backendUrl}/api/v3/start`, startData);\n    // if (resp2.status !== 200) throw new Error(\"Error sending sms\");\n    return resp2.code;\n  }\n\n  async addSmsRecovery(address: string, code: string, factorKey: BN) {\n    if (!factorKey) throw new Error(\"factorKey is not defined\");\n    if (!address) throw new Error(\"address is not defined\");\n\n    const data = {\n      address,\n      code,\n      data: {\n        // If the verification is complete, we save the factorKey for the user address.\n        // This factorKey is used to verify the user in the future on a new device and recover tss share.\n        factorKey: factorKey.toString(16, 64),\n      },\n    };\n\n    await post(`${this.backendUrl}/api/v3/verify`, data);\n  }\n\n  async requestOTP(address: string): Promise<string | undefined> {\n    const startData = {\n      address,\n    };\n    const resp2 = await post<{ success?: boolean; code?: string }>(`${this.backendUrl}/api/v3/start`, startData);\n    // eslint-disable-next-line no-console\n    console.log(resp2);\n    return resp2.code;\n  }\n\n  async verifyRecovery(address: string, code: string): Promise<BN | undefined> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify`, verificationData);\n    const { data } = response;\n    return data ? new BN(data.factorKey, \"hex\") : undefined;\n  }\n\n  async verifyRemoteSetup(address: string, code: string): Promise<IRemoteClientState & { tssShareIndex: string }> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify_remote`, verificationData);\n    const { data } = response;\n\n    return {\n      tssShareIndex: this.tssIndex.toString(),\n      remoteClientUrl: this.backendUrl,\n      remoteFactorPub: this.factorPub,\n      metadataShare: data.metadataShare,\n      remoteClientToken: data.signature,\n    };\n  }\n}\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\";\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nexport interface InitParams {\n  handleRedirectResult: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = SubVerifierDetailsParams | AggregateVerifierLoginParams;\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n}\n\nexport interface IRemoteClientState {\n  remoteFactorPub: string;\n  remoteClientUrl: string;\n  remoteClientToken: string;\n  metadataShare: string;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n  remoteClient?: IRemoteClientState;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: \"session\" | \"local\" | \"memory\" | IStorage;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `[]`\n   * Server hostUrl for authorization before signing or refresh.\n   * Will request for authorization every signing or refresh if being set.\n   * Required for remote client setup.\n   */\n  authorizationUrl?: string[];\n\n  /**\n   * @defaultValue `false`\n   * Allow no authorization requirement for remote client setup.\n   * if AuthorizationUrl is set, this option will be ignored.\n   */\n  allowNoAuthorizationForRemoteClient?: boolean;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n  remoteClient?: IRemoteClientState;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n  BNString,\n  encrypt,\n  EncryptedMessage,\n  getPubKeyPoint,\n  Point as TkeyPoint,\n  SHARE_DELETED,\n  ShareStore,\n  StringifiedType,\n} from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError, lagrangeInterpolation } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\n// import { name, version } from \"../package.json\";\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    // log.info(\"======================================================\");\n    // log.info(`WEB3AUTH SDK : ${name}:${version}`);\n\n    // log.info(\"======================================================\");\n\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n    if (options.uxMode === \"nodejs\" && [\"local\", \"session\"].includes(options.storageKey.toString())) {\n      throw new Error(`nodejs mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (options.uxMode === \"nodejs\" && !options.tssLib) {\n      throw new Error(`nodejs mode requires tssLib`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = `${window.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.authorizationUrl) options.authorizationUrl = [];\n    if (!options.allowNoAuthorizationForRemoteClient) options.allowNoAuthorizationForRemoteClient = false;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || (!this.state.factorKey && !this.state.remoteClient)) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  public async _UNSAFE_recoverTssKey(factorKey: string[]) {\n    this.checkReady();\n    const factorKeyBN = new BN(factorKey[0], \"hex\");\n\n    const shareStore0 = await this.getFactorKeyMetadata(factorKeyBN);\n    await this.tKey.initialize({ withShare: shareStore0 });\n\n    this.tkey.privKey = new BN(factorKey[1], \"hex\");\n\n    const tssShares: BN[] = [];\n    const tssIndexes: number[] = [];\n    const tssIndexesBN: BN[] = [];\n    for (let i = 0; i < factorKey.length; i++) {\n      const factorKeyBNInput = new BN(factorKey[i], \"hex\");\n      const { tssIndex, tssShare } = await this.tKey.getTSSShare(factorKeyBNInput);\n      if (tssIndexes.includes(tssIndex)) {\n        await this.init();\n        throw new Error(\"Duplicate TSS Index\");\n      }\n      tssIndexes.push(tssIndex);\n      tssIndexesBN.push(new BN(tssIndex));\n      tssShares.push(tssShare);\n    }\n\n    const finalKey = lagrangeInterpolation(tssShares, tssIndexesBN);\n    await this.init();\n    return finalKey.toString(\"hex\");\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl ? this.options.baseUrl : `${window.location.origin}/serviceworker`,\n        uxMode: this.options.uxMode === \"nodejs\" ? UX_MODE.REDIRECT : this.options.uxMode,\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (this.sessionManager.sessionId) {\n      await this.rehydrateSession();\n      if (this.state.factorKey || this.state.remoteClient) await this.setupProvider();\n    }\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams, importTssKey?: string): Promise<void> {\n    this.checkReady();\n\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams, importTssKey?: string): Promise<void> {\n    this.checkReady();\n\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    if (this.state.remoteClient) throw new Error(\"remoteClient is present, inputFactorKey are not allowed\");\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    let browserData;\n\n    if (this.options.uxMode === \"nodejs\") {\n      browserData = {\n        browserName: \"Node Env\",\n        browserVersion: \"\",\n        deviceName: \"nodejs\",\n      };\n    } else {\n      const browserInfo = bowser.parse(navigator.userAgent);\n      const browserName = `${browserInfo.browser.name}`;\n      browserData = {\n        browserName,\n        browserVersion: browserInfo.browser.version,\n        deviceName: browserInfo.os.name,\n      };\n    }\n\n    const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n    storeWebBrowserFactor(deviceFactorKey, this);\n    await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n    const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n    await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n    await this.deleteMetadataShareBackup(hashedFactorKey);\n\n    // only recovery factor = true\n    if (recoveryFactor) {\n      const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n      return backupFactorKey;\n    }\n    // update to undefined for next major release\n    return \"\";\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return tssPubKey;\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    if (this.state.remoteClient) {\n      return this.remoteSign(msgHash);\n    }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    let { tssShareIndex, tssPubKey } = this.state;\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.options.uxMode === \"nodejs\") {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n\n    const signatures = await this.getSigningSignatures(\"delete factor\");\n    if (this.state.remoteClient) {\n      const remoteStateFpp = this.state.remoteClient.remoteFactorPub;\n      if (fpp.equals(Point.fromTkeyPoint(getPubKeyPoint(new BN(remoteStateFpp, \"hex\"))))) {\n        throw new Error(\"Cannot delete current active factor\");\n      }\n      await deleteFactorAndRefresh(\n        this.tKey,\n        factorPub,\n        new BN(0), // not used in remoteClient\n        signatures,\n        this.state.remoteClient\n      );\n    } else {\n      const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n      if (fpp.equals(stateFpp)) {\n        throw new Error(\"Cannot delete current active factor\");\n      }\n      await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, signatures);\n    }\n\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  public async setupRemoteClient(params: {\n    remoteClientUrl: string;\n    remoteFactorPub: string;\n    metadataShare: string;\n    remoteClientToken: string;\n    tssShareIndex: string;\n  }): Promise<Promise<void>> {\n    const { remoteClientUrl, remoteFactorPub, metadataShare, remoteClientToken, tssShareIndex } = params;\n\n    const remoteClient = {\n      remoteClientUrl: remoteClientUrl.at(-1) === \"/\" ? remoteClientUrl.slice(0, -1) : remoteClientUrl,\n      remoteFactorPub,\n      metadataShare,\n      remoteClientToken,\n    };\n\n    const sharestore = ShareStore.fromJSON(JSON.parse(metadataShare));\n    this.tkey.inputShareStoreSafe(sharestore);\n    await this.tKey.reconstructKey();\n\n    // setup Tkey\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n    this.updateState({ tssShareIndex: parseInt(tssShareIndex), tssPubKey, remoteClient });\n\n    // // Finalize setup.\n    // setup provider\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    await this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (this.state.remoteClient) throw new Error(\"export tss key not supported for remote client\");\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(importTssKey?: string): Promise<void> {\n    if (this.state.remoteClient) {\n      log.warn(\"remote client is present, setupTkey are skipped\");\n      return;\n    }\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n      }\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      if (!importTssKey) {\n        const deviceTSSShare = new BN(generatePrivate());\n        await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n      } else {\n        await this.tKey.initialize();\n        await this.importTssKey(importTssKey, factorPub, deviceTSSIndex);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      if (importTssKey) throw new Error(\"Cannot import tss key for existing user\");\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession() {\n    try {\n      this.checkReady();\n\n      if (!this.sessionManager.sessionId) return {};\n      const result = await this.sessionManager.authorizeSession();\n      if (!result.factorKey && !result.remoteClient) throw new Error(\"factorKey not present\");\n      let metadataShare;\n\n      if (result.factorKey) {\n        const factorKey = new BN(result.factorKey, \"hex\");\n        if (!factorKey) {\n          throw new Error(\"Invalid factor key\");\n        }\n        metadataShare = await this.getFactorKeyMetadata(factorKey);\n      } else {\n        metadataShare = ShareStore.fromJSON(JSON.parse(result.remoteClient.metadataShare));\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(metadataShare, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n        remoteClient: result.remoteClient,\n      });\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    if (this.options.sessionTime === 0) {\n      log.info(\"sessionTime is 0, not creating session\");\n      return;\n    }\n\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey, remoteClient } = this.state;\n      if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n\n      if (!this.state.remoteClient) {\n        const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n        if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n          throw new Error(\"User not logged in\");\n        }\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n        remoteClient,\n      };\n      await this.sessionManager.createSession(payload);\n      this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey && !this.state.remoteClient) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    const signatures = await this.getSigningSignatures(\"create factor\");\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      // Generate new share.\n      if (!this.state.remoteClient) {\n        await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, signatures);\n      } else {\n        await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, signatures, this.state.remoteClient);\n      }\n      return;\n    }\n    // TODO : fix this\n    let userEnc: EncryptedMessage;\n    if (this.state.remoteClient) {\n      const remoteFactorPub = TkeyPoint.fromCompressedPub(this.state.remoteClient.remoteFactorPub);\n      const factorEnc = this.tkey.getFactorEncs(remoteFactorPub);\n      const tssCommits = this.tkey.getTSSCommits();\n      const dataRequired = {\n        factorEnc,\n        tssCommits,\n        factorPub: newFactorPub,\n      };\n\n      userEnc = (\n        await post<{ data?: EncryptedMessage }>(\n          `${this.state.remoteClient.remoteClientUrl}/api/v3/mpc/copy_tss_share`,\n          { dataRequired },\n          {\n            headers: {\n              Authorization: `Bearer ${this.state.remoteClient.remoteClientToken}`,\n            },\n          }\n        )\n      ).data;\n    } else {\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      userEnc = await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare));\n    }\n\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc,\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    // if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.tkey = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    if (this.options.authorizationUrl.length === 0) {\n      if (this.state.remoteClient && !this.options.allowNoAuthorizationForRemoteClient) {\n        throw new Error(\"remote client is present, authorizationUrl is required\");\n      }\n      return this.signatures;\n    }\n    const sigPromise = this.options.authorizationUrl.map(async (url) => {\n      const { sig } = await post<{ sig?: string }>(url, {\n        signatures: this.signatures,\n        verifier: this.verifier,\n        verifierID: this.verifierId,\n        clientID: this.options.web3AuthClientId,\n        data,\n      });\n\n      return sig;\n    });\n    return Promise.all(sigPromise);\n  }\n\n  public async remoteSign(msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> {\n    if (!this.state.remoteClient.remoteClientUrl) throw new Error(\"remoteClientUrl not present\");\n\n    // PreSetup\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    const tssCommits = this.tKey.getTSSCommits();\n\n    const tssNonce = this.getTssNonce() || 0;\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n\n    if (parties - 1 > nodeIndexes.length) {\n      throw new Error(`Not enough nodes to perform TSS - parties :${parties}, nodeIndexes:${nodeIndexes.length}`);\n    }\n    const { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned } = generateTSSEndpoints(\n      torusNodeTSSEndpoints,\n      parties,\n      clientIndex,\n      nodeIndexes\n    );\n\n    const factor = TkeyPoint.fromCompressedPub(this.state.remoteClient.remoteFactorPub);\n    const factorEnc = this.tKey.getFactorEncs(factor);\n\n    const data = {\n      dataRequired: {\n        factorEnc,\n        sessionId,\n        tssNonce,\n        nodeIndexes: nodeIndexesReturned,\n        tssCommits: tssCommits.map((commit) => commit.toJSON()),\n        signatures: await this.getSigningSignatures(msgHash.toString(\"hex\")),\n        serverEndpoints: { endpoints, tssWSEndpoints, partyIndexes },\n      },\n      msgHash: msgHash.toString(\"hex\"),\n    };\n\n    const result = await post<{ data?: Record<string, string> }>(`${this.state.remoteClient.remoteClientUrl}/api/v3/mpc/sign`, data, {\n      headers: {\n        Authorization: `Bearer ${this.state.remoteClient.remoteClientToken}`,\n      },\n    });\n    const { r, s, v } = result.data as { v: string; r: string; s: string };\n    return { v: parseInt(v), r: Buffer.from(r, \"hex\"), s: Buffer.from(s, \"hex\") };\n  }\n}\n"],"names":["DEFAULT_CHAIN_CONFIG","chainNamespace","CHAIN_NAMESPACES","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","TORUS_SAPPHIRE_NETWORK","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","EllipticCurve","MAX_FACTORS","SOCIAL_TKEY_INDEX","generateFactorKey","factorKey","BN","generatePrivate","factorPub","getPubKeyPoint","private","pub","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64Url","split","base64","replace","JSON","parse","atob","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","undefined","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","randomSelection","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","remoteRefreshTssShares","remoteClient","finalSelectedServers","tssCommits","metadata","tssPolyCommits","tssTag","tssNonce","tssNonces","pubKey","newTSSServerPub","getTSSPubKey","slice","min","factorEnc","getFactorEncs","TkeyPoint","fromCompressedPub","remoteFactorPub","dataRequired","toJSON","targetIndexes","commit","serverOpts","result","post","remoteClientUrl","headers","Authorization","remoteClientToken","data","addTSSData","fromJSON","factorEncs","_syncShareMetadata","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","VALID_TSS_INDICES","indexOf","isArray","existingFactorPubs","updatedFactorPubs","concat","existingTSSIndexes","fb","updatedTSSIndexes","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","keccak256","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","Web3AuthStateFromJSON","tssShareIndex","tssPubKey","oAuthKey","parseInt","userInfo","MemoryStorage","constructor","_defineProperty","getItem","key","_store","value","clear","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","instance","currStore","getStore","stringify","get","store","set","remove","storeWebBrowserFactor","mpcCoreKit","getMetadata","currentStorage","tkeyPubX","toString","padStart","getWebBrowserFactor","tKeyLocalStoreString","tKeyLocalStore","mnemonicToKey","shareMnemonic","ShareSerializationModule","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","mnemonic","serializeMnemonic","ZERO_POINT","g","mul","Point","fromPrivateKey","privateKey","ep","keyFromPrivate","getPublic","fromTkeyPoint","keyFromPublic","y","fromBufferSEC1","buf","toTkeyPoint","isInfinity","getX","getY","toBufferSEC1","compressed","encode","equals","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","json","TssSecurityQuestion","setSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","storeData","setGeneralStoreDomain","manualSync","changeSecurityQuestion","newQuestion","newAnswer","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","state","inputFactorKey","deleteFactor","deleteSecurityQuestion","deleteFactorKey","tkeyPoint","deleteGeneralStoreDomain","recoverFactor","getQuestion","AuthenticatorService","backendUrl","authenticatorType","coreKitInstance","getDescriptionsAndUpdate","arrayOfDescriptions","Object","entries","shareDescriptions","_ref","parsedDescription","shareDescriptionsMobile","find","_ref2","authenticator","log","info","generateSecretKey","subarray","base32","register","privKey","secretKey","privKeyPair","sig","sign","r","v","recoveryParam","resp","addRecovery","address","code","verifyRecovery","verificationData","response","verifyRemoteSetup","metadataShare","signature","SmsService","number","startData","resp2","addSmsRecovery","requestOTP","console","COREKIT_STATUS","Web3AuthMPCCoreKit","options","checkReady","factorPubsList","msgHash","remoteSign","localSign","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","getTssNonce","vid","sessionId","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","uxMode","tssLib","default","sockets","Promise","all","setupSockets","dklsCoeff","getDKLSCoeff","denormalisedShare","umod","curve","n","share","getSigningSignatures","client","Client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","chainConfig","web3AuthClientId","enableLogging","enableAll","setLevel","web3AuthNetwork","sessionTime","UX_MODE","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","authorizationUrl","allowNoAuthorizationForRemoteClient","_storageBaseKey","sessionManager","OpenloginSessionManager","NodeDetailManager","network","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","status","NOT_INITIALIZED","INITIALIZED","REQUIRED_SHARE","LOGGED_IN","e","_this$state$userInfo","_this$state3","aggregateVerifier","_this$state4","isRedirectMode","_UNSAFE_recoverTssKey","shareStore0","getFactorKeyMetadata","initialize","withShare","tssShares","tssIndexes","tssIndexesBN","factorKeyBNInput","init","finalKey","lagrangeInterpolation","_window","_window2","handleRedirectResult","resetState","nodeDetails","torusSp","TorusServiceProvider","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","TorusStorageLayer","hostUrl","shareSerializationModule","ThresholdKey","modules","shareSerialization","skipSw","skipPrefetch","POPUP","rehydrateSession","setupProvider","loginWithOauth","importTssKey","tkeyServiceProvider","verifierParams","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","CoreError","message","loginWithJWT","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getTorusKey","verifier_id","extraVerifierParams","additionalParams","verifierType","getAggregateTorusKey","oAuthShare","verifierName","getRedirectResult","method","TORUS_METHOD","TRIGGER_LOGIN","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFA","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","bowser","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","backupFactorKey","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","remainingFactors","fpp","remoteStateFpp","stateFpp","factorPubHex","allDesc","getShareDescription","keyDesc","forEach","desc","_this$tKey","deleteShareDescription","derivedFactorPub","logout","invalidateSession","tkeyDetails","factors","keyDetails","requiredFactors","requiredShares","threshold","totalFactors","metadataPubKey","commitChanges","syncLocalMetadataTransitions","setManualSync","setupRemoteClient","at","sharestore","ShareStore","createSession","tssKey","newTSSIndex","tssKeyBN","tag","importKey","_UNSAFE_exportTssKey","exportTssKey","warn","existingUser","isMetadataPresent","deviceTSSIndex","deviceTSSShare","HashedShare","neverInitializeNewKey","authorizeSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","keys","_this$tKey3","_this$tKey4","userEnc","getTSSCommits","encrypt","factorPubID","serverEncs","getMetadataShare","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","SHARE_DELETED","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","_this$tKey8","module","addShareDescription","signingProvider","EthereumSigningProvider","config","newState","TorusUtils","getPostboxKey","session","sigPromise","url","verifierID","clientID","factor"],"mappings":"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"}