{"version":3,"file":"mpcCoreKit.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/helper/browserStorage.ts","../src/helper/factorSerialization.ts","../src/point.ts","../src/helper/securityQuestion.ts","../src/interfaces.ts","../src/mpcCoreKit.ts"],"sourcesContent":["import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth-mpc/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","import { getPubKeyPoint, Point, Point as TkeyPoint, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nasync function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: Point[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: Point,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[]\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport async function deleteFactorAndRefresh(tKey: ThresholdKey, factorPubToDelete: Point, factorKeyForExistingTSSShare: BN, signatures: string[]) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { IAsyncStorage, ICoreKit, IStorage, SupportedStorageType, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport class AsyncStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: AsyncStorage;\n\n  public storage: IAsyncStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IAsyncStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n  }\n\n  static getInstance(key: string, storageKey: IAsyncStorage): AsyncStorage {\n    if (!this.instance) {\n      const storage: IAsyncStorage = storageKey;\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  async toJSON(): Promise<string> {\n    const result = await this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  async resetStore(): Promise<Record<string, unknown>> {\n    const currStore = await this.getStore();\n    await this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  async getStore(): Promise<Record<string, unknown>> {\n    return JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n  }\n\n  async get<T>(key: string): Promise<T> {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    return store[key];\n  }\n\n  async set<T>(key: string, value: T): Promise<void> {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    store[key] = value;\n    await this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  async remove(key: string): Promise<void> {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    delete store[key];\n    await this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function asyncStoreFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: IAsyncStorage): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = AsyncStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  await currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function asyncGetFactor(mpcCoreKit: ICoreKit, storageKey: IAsyncStorage): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = AsyncStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = await currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport type { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  /**\n   * Creates a new Point from a private Key.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth-mpc/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\" | \"react-native\";\n\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\nexport interface IAsyncStorage {\n  async?: boolean;\n  getItem(key: string): Promise<string | null>;\n  setItem(key: string, value: string): Promise<void>;\n}\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport interface InitParams {\n  /**\n   * @defaultValue `true`\n   * handle the redirect result during init()\n   */\n  handleRedirectResult: boolean;\n  /**\n   * @defaultValue `true`\n   * rehydrate the session during init()\n   */\n  rehydrate?: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = (SubVerifierDetailsParams | AggregateVerifierLoginParams) & { importTssKey?: string };\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n\n  /**\n   * Key to import key into Tss during first time login.\n   */\n  importTssKey?: string;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: SupportedStorageType;\n\n  /**\n   *  asyncStorageKey take precedence over storageKey.\n   *  if asyncStorageKey is provided, storageKey will be ignored.\n   * @defaultValue `undefined`\n   */\n  asyncStorageKey?: IAsyncStorage;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `Web3AuthOptions.web3AuthClientId`\n   * Overwrites the default value ( clientId ) used as nonce for hashing the hash factor key.\n   *\n   * If you want to aggregate the mfa status of client id 1 and client id 2  apps\n   * set hashedFactorNonce to some common clientID, which can be either client id 1 or client id 2 or any other unique string\n   * #PR 72\n   * Do not use this unless you know what you are doing.\n   */\n  hashedFactorNonce?: string;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport { BNString, encrypt, getPubKeyPoint, Point as TkeyPoint, SHARE_DELETED, ShareStore, StringifiedType } from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError, lagrangeInterpolation } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { SIGNER_MAP } from \"@toruslabs/constants\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport type { UX_MODE_TYPE } from \"@toruslabs/customauth/dist/types/utils/enums\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth-mpc/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { AsyncStorage, asyncStoreFactor, BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CoreKitMode,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage | AsyncStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n\n    const isNodejsOrRN = this.isNodejsOrRN(options.uxMode);\n\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (isNodejsOrRN && [\"local\", \"session\"].includes(options.storageKey.toString()) && !options.asyncStorageKey) {\n      throw new Error(`${options.uxMode} mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (isNodejsOrRN && !options.tssLib) {\n      throw new Error(`${options.uxMode} mode requires tssLib`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = isNodejsOrRN ? \"https://localhost\" : `${window?.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.hashedFactorNonce) options.hashedFactorNonce = options.web3AuthClientId;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    if (this.options.asyncStorageKey) {\n      this.currentStorage = AsyncStorage.getInstance(this._storageBaseKey, options.asyncStorageKey);\n    } else {\n      this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n    }\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n\n    const asyncConstructor = async () => {\n      const sessionId = await this.currentStorage.get<string>(\"sessionId\");\n      this.sessionManager = new OpenloginSessionManager({\n        sessionTime: this.options.sessionTime,\n        sessionId,\n      });\n    };\n    asyncConstructor();\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  // this return oauthkey which is used by demo to reset account.\n  // this is not the same metadataKey from tkey.\n  // will be fixed in next major release\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || !this.state.factorKey) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  // RecoverTssKey only valid for user that enable MFA where user has 2 type shares :\n  // TssShareType.DEVICE and TssShareType.RECOVERY\n  // if the factors key provided is the same type recovery will not works\n  public async _UNSAFE_recoverTssKey(factorKey: string[]) {\n    this.checkReady();\n    const factorKeyBN = new BN(factorKey[0], \"hex\");\n    const shareStore0 = await this.getFactorKeyMetadata(factorKeyBN);\n    await this.tKey.initialize({ withShare: shareStore0 });\n\n    this.tkey.privKey = new BN(factorKey[1], \"hex\");\n\n    const tssShares: BN[] = [];\n    const tssIndexes: number[] = [];\n    const tssIndexesBN: BN[] = [];\n    for (let i = 0; i < factorKey.length; i++) {\n      const factorKeyBNInput = new BN(factorKey[i], \"hex\");\n      const { tssIndex, tssShare } = await this.tKey.getTSSShare(factorKeyBNInput);\n      if (tssIndexes.includes(tssIndex)) {\n        // reset instance before throw error\n        await this.init();\n        throw new Error(\"Duplicate TSS Index\");\n      }\n      tssIndexes.push(tssIndex);\n      tssIndexesBN.push(new BN(tssIndex));\n      tssShares.push(tssShare);\n    }\n\n    const finalKey = lagrangeInterpolation(tssShares, tssIndexesBN);\n    // reset instance after recovery completed\n    await this.init();\n    return finalKey.toString(\"hex\", 64);\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n    if (params.rehydrate === undefined) params.rehydrate = true;\n\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl,\n        uxMode: this.isNodejsOrRN(this.options.uxMode) ? UX_MODE.REDIRECT : (this.options.uxMode as UX_MODE_TYPE),\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      // on failed redirect, instance is reseted.\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (params.rehydrate && this.sessionManager.sessionId) {\n      // swallowed, should not throw on rehydrate timed out session\n      const sessionResult = await this.sessionManager.authorizeSession().catch(async (err) => {\n        log.info(\"rehydrate session error\", err);\n      });\n\n      // try rehydrate session\n      if (sessionResult) {\n        await this.rehydrateSession(sessionResult);\n      } else {\n        // feature gating on no session rehydration\n        await this.featureRequest();\n      }\n    } else {\n      // feature gating if not redirect flow or session rehydration\n      await this.featureRequest();\n    }\n\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams): Promise<void> {\n    this.checkReady();\n    if (this.isNodejsOrRN(this.options.uxMode)) throw new Error(`Oauth login is NOT supported in ${this.options.uxMode}`);\n    const { importTssKey } = params;\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void> {\n    this.checkReady();\n    const { importTssKey } = idTokenLoginParams;\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      this.resetState();\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    try {\n      let browserData;\n\n      if (this.isNodejsOrRN(this.options.uxMode)) {\n        browserData = {\n          browserName: \"Node Env\",\n          browserVersion: \"\",\n          deviceName: \"nodejs\",\n        };\n      } else {\n        // try {\n        const browserInfo = bowser.parse(navigator.userAgent);\n        const browserName = `${browserInfo.browser.name}`;\n        browserData = {\n          browserName,\n          browserVersion: browserInfo.browser.version,\n          deviceName: browserInfo.os.name,\n        };\n      }\n      const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n      if (this.currentStorage instanceof AsyncStorage) {\n        asyncStoreFactor(deviceFactorKey, this, this.options.asyncStorageKey);\n      } else {\n        storeWebBrowserFactor(deviceFactorKey, this, this.options.storageKey);\n      }\n      await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n      const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n      await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n      await this.deleteMetadataShareBackup(hashedFactorKey);\n\n      // only recovery factor = true\n      if (recoveryFactor) {\n        const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n        return backupFactorKey;\n      }\n      // update to undefined for next major release\n      return \"\";\n    } catch (err: unknown) {\n      log.error(\"error enabling MFA\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return Buffer.from(tssPubKey);\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    // if (this.state.remoteClient) {\n    //   return this.remoteSign(msgHash);\n    // }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    const { tssShareIndex } = this.state;\n    let tssPubKey = await this.getPublic();\n\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.isNodejsOrRN(this.options.uxMode)) {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n    const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n    if (fpp.equals(stateFpp)) {\n      throw new Error(\"Cannot delete current active factor\");\n    }\n\n    await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, this.signatures);\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    // to accommodate async storage\n    await this.currentStorage.set(\"sessionId\", \"\");\n\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    await this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(importTssKey?: string): Promise<void> {\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      }\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      if (!importTssKey) {\n        const deviceTSSShare = new BN(generatePrivate());\n        await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n      } else {\n        await this.tKey.initialize();\n        await this.importTssKey(importTssKey, factorPub, deviceTSSIndex);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      if (importTssKey) throw new Error(\"Cannot import tss key for existing user\");\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession(result: SessionData) {\n    try {\n      this.checkReady();\n\n      const factorKey = new BN(result.factorKey, \"hex\");\n      if (!factorKey) {\n        throw new Error(\"Invalid factor key\");\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n      });\n\n      await this.setupProvider();\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey } = this.state;\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n        throw new Error(\"User not logged in\");\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n      };\n      await this.sessionManager.createSession(payload);\n      // to accommodate async storage\n      await this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n      // Generate new share.\n      await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, this.signatures);\n\n      // Update local share.\n      const { tssIndex } = await this.tKey.getTSSShare(this.state.factorKey);\n      this.updateState({\n        tssShareIndex: tssIndex,\n      });\n      return;\n    }\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc: await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare)),\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.ready = false;\n    this.tkey = null;\n    this.torusSp = null;\n    this.storageLayer = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    log.info(\"data\", data);\n    return this.signatures;\n  }\n\n  private isNodejsOrRN(params: CoreKitMode): boolean {\n    const mode = params;\n    return mode === \"nodejs\" || mode === \"react-native\";\n  }\n\n  private async featureRequest() {\n    const accessUrl = SIGNER_MAP[this.options.web3AuthNetwork];\n\n    const accessRequest = {\n      network: this.options.web3AuthNetwork,\n      client_id: this.options.web3AuthClientId,\n      is_mpc_core_kit: \"true\",\n      enable_gating: \"true\",\n    };\n    const url = new URL(`${accessUrl}/api/feature-access`);\n    url.search = new URLSearchParams(accessRequest).toString();\n    const result = await fetch(url);\n\n    if (result.status !== 200) {\n      // reset state on no mpc access\n      this.resetState();\n      throw new Error(\"MPC access denied, please subscribe to our plan to use MPC\");\n    }\n    return result.json();\n  }\n}\n"],"names":["DEFAULT_CHAIN_CONFIG","chainNamespace","CHAIN_NAMESPACES","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","TORUS_SAPPHIRE_NETWORK","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","EllipticCurve","MAX_FACTORS","SOCIAL_TKEY_INDEX","generateFactorKey","factorKey","BN","generatePrivate","factorPub","getPubKeyPoint","private","pub","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64Url","split","base64","replace","JSON","parse","atob","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","undefined","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","randomSelection","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","VALID_TSS_INDICES","indexOf","metadata","isArray","tssTag","existingFactorPubs","updatedFactorPubs","concat","existingTSSIndexes","fb","getFactorEncs","updatedTSSIndexes","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","slice","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","keccak256","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","MemoryStorage","constructor","_defineProperty","getItem","key","_store","value","clear","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","instance","toJSON","result","currStore","getStore","stringify","get","store","set","remove","AsyncStorage","asyncStoreFactor","mpcCoreKit","getMetadata","currentStorage","tkeyPubX","pubKey","toString","padStart","asyncGetFactor","tKeyLocalStoreString","tKeyLocalStore","storeWebBrowserFactor","getWebBrowserFactor","mnemonicToKey","shareMnemonic","ShareSerializationModule","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","mnemonic","serializeMnemonic","ZERO_POINT","g","mul","Point","fromPrivateKey","privateKey","ep","keyFromPrivate","getPublic","fromTkeyPoint","keyFromPublic","y","fromBufferSEC1","buf","toTkeyPoint","isInfinity","getX","getY","TkeyPoint","toBufferSEC1","compressed","encode","equals","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","fromJSON","json","TssSecurityQuestion","setSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","storeData","setGeneralStoreDomain","manualSync","_syncShareMetadata","changeSecurityQuestion","newQuestion","newAnswer","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","parseInt","state","inputFactorKey","deleteFactor","deleteSecurityQuestion","deleteFactorKey","tkeyPoint","fromCompressedPub","deleteGeneralStoreDomain","recoverFactor","getQuestion","COREKIT_STATUS","Web3AuthMPCCoreKit","options","_window","checkReady","factorPubsList","tssPubKey","subarray","msgHash","localSign","tssShareIndex","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","tssNonce","getTssNonce","vid","sessionId","getTSSPubKey","tssNonces","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","isNodejsOrRN","uxMode","tssLib","default","sockets","Promise","all","setupSockets","dklsCoeff","getDKLSCoeff","denormalisedShare","umod","curve","n","share","getSigningSignatures","client","Client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","r","recoveryParam","sign","v","chainConfig","web3AuthClientId","asyncStorageKey","enableLogging","log","enableAll","setLevel","web3AuthNetwork","sessionTime","UX_MODE","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","hashedFactorNonce","_storageBaseKey","NodeDetailManager","network","asyncConstructor","sessionManager","OpenloginSessionManager","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","oAuthKey","status","NOT_INITIALIZED","INITIALIZED","privKey","REQUIRED_SHARE","LOGGED_IN","e","_this$state$userInfo","_this$state3","userInfo","aggregateVerifier","_this$state4","isRedirectMode","_UNSAFE_recoverTssKey","shareStore0","getFactorKeyMetadata","initialize","withShare","tssShares","tssIndexes","tssIndexesBN","factorKeyBNInput","init","finalKey","lagrangeInterpolation","_window2","_window3","handleRedirectResult","resetState","rehydrate","nodeDetails","torusSp","TorusServiceProvider","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","TorusStorageLayer","hostUrl","shareSerializationModule","ThresholdKey","modules","shareSerialization","skipSw","skipPrefetch","POPUP","sessionResult","authorizeSession","info","rehydrateSession","featureRequest","loginWithOauth","importTssKey","tkeyServiceProvider","verifierParams","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","CoreError","code","message","loginWithJWT","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getTorusKey","verifier_id","extraVerifierParams","additionalParams","verifierType","getAggregateTorusKey","oAuthShare","verifierName","getRedirectResult","method","TORUS_METHOD","TRIGGER_LOGIN","data","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFA","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","bowser","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","backupFactorKey","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","remainingFactors","fpp","stateFpp","factorPubHex","allDesc","getShareDescription","keyDesc","forEach","desc","_this$tKey","deleteShareDescription","derivedFactorPub","logout","invalidateSession","tkeyDetails","factors","keyDetails","requiredFactors","requiredShares","threshold","totalFactors","shareDescriptions","metadataPubKey","commitChanges","syncLocalMetadataTransitions","setManualSync","tssKey","newTSSIndex","tssKeyBN","tag","importKey","_UNSAFE_exportTssKey","exportTssKey","existingUser","isMetadataPresent","deviceTSSIndex","deviceTSSShare","HashedShare","neverInitializeNewKey","setupProvider","createSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","Object","keys","_this$tKey3","_this$tKey4","ShareStore","factorEncs","factorPubID","userEnc","encrypt","serverEncs","addTSSData","getMetadataShare","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","SHARE_DELETED","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","metadataShare","_this$tKey8","module","addShareDescription","signingProvider","EthereumSigningProvider","config","newState","TorusUtils","getPostboxKey","session","sig","signature","mode","accessUrl","SIGNER_MAP","accessRequest","client_id","is_mpc_core_kit","enable_gating","url","search","URLSearchParams","fetch"],"mappings":"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"}