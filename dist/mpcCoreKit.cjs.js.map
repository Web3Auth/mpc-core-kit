{"version":3,"file":"mpcCoreKit.cjs.js","mappings":"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","sources":["webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-lib\"","webpack://@web3auth/mpc-core-kit/webpack/bootstrap","webpack://@web3auth/mpc-core-kit/webpack/runtime/compat get default export","webpack://@web3auth/mpc-core-kit/webpack/runtime/create fake namespace object","webpack://@web3auth/mpc-core-kit/webpack/runtime/define property getters","webpack://@web3auth/mpc-core-kit/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/mpc-core-kit/webpack/runtime/make namespace object","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/constants\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"elliptic\"","webpack://@web3auth/mpc-core-kit/./src/constants.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/common-types\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/torus.js\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bn.js\"","webpack://@web3auth/mpc-core-kit/./src/utils.ts","webpack://@web3auth/mpc-core-kit/./src/helper/browserStorage.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/share-serialization\"","webpack://@web3auth/mpc-core-kit/./src/helper/factorSerialization.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@web3auth/mpc-core-kit/./src/point.ts","webpack://@web3auth/mpc-core-kit/./src/helper/securityQuestion.ts","webpack://@web3auth/mpc-core-kit/./src/helper/index.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"hi-base32\"","webpack://@web3auth/mpc-core-kit/./src/helper/authenticator/authenticatorService.ts","webpack://@web3auth/mpc-core-kit/./src/helper/authenticator/smsService.ts","webpack://@web3auth/mpc-core-kit/./src/interfaces.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/core\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/service-provider-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/storage-layer-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/customauth\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/openlogin-session-manager\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-client\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth-mpc/ethereum-provider\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bowser\"","webpack://@web3auth/mpc-core-kit/./src/mpcCoreKit.ts","webpack://@web3auth/mpc-core-kit/./src/index.ts"],"sourcesContent":["module.exports = require(\"@toruslabs/tss-lib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { FactorEnc, getPubKeyPoint, Point as TkeyPoint, PointHex, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256, StringifiedType } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\nimport { IRemoteClientState, UserInfo, Web3AuthState } from \"./interfaces\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nexport async function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: TkeyPoint[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport interface refreshRemoteTssType {\n  // from client\n  factorEnc: FactorEnc;\n\n  factorPubs: TkeyPoint[];\n  targetIndexes: number[];\n  verifierNameVerifierId: string;\n\n  tssTag: string;\n  tssCommits: TkeyPoint[];\n  tssNonce: number;\n  newTSSServerPub: TkeyPoint;\n  // nodeIndexes : number[],\n\n  serverOpts: {\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n    selectedServers: number[];\n    authSignatures: string[];\n  };\n}\nexport interface refreshRemoteTssReturnType {\n  tssTag: string;\n  tssNonce: number;\n  tssPolyCommits: TkeyPoint[];\n  factorPubs: TkeyPoint[];\n  factorEncs: {\n    [factorPubID: string]: FactorEnc;\n  };\n}\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param remoteFactorPub - Factor Pub for remote share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nexport async function remoteRefreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: TkeyPoint[],\n  tssIndices: number[],\n  signatures: string[],\n  remoteClient: IRemoteClientState,\n  updateMetadata = false\n) {\n  // const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  let finalSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n\n  const tssCommits = tKey.metadata.tssPolyCommits[tKey.tssTag];\n  const tssNonce: number = tKey.metadata.tssNonces[tKey.tssTag] || 0;\n  const { pubKey: newTSSServerPub, nodeIndexes } = await tKey.serviceProvider.getTSSPubKey(tKey.tssTag, tssNonce + 1);\n  // move to pre-refresh\n  if (nodeIndexes?.length > 0) {\n    finalSelectedServers = nodeIndexes.slice(0, Math.min(serverEndpoints.length, nodeIndexes.length));\n  }\n\n  const factorEnc = tKey.getFactorEncs(TkeyPoint.fromCompressedPub(remoteClient.remoteFactorPub));\n\n  const dataRequired = {\n    factorEnc,\n    factorPubs: factorPubs.map((pub) => pub.toJSON()),\n    targetIndexes: tssIndices,\n    verifierNameVerifierId,\n    tssTag: tKey.tssTag,\n    tssCommits: tssCommits.map((commit) => commit.toJSON()),\n    tssNonce,\n    newTSSServerPub: newTSSServerPub.toJSON(),\n    serverOpts: {\n      selectedServers: finalSelectedServers,\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n      authSignatures: signatures,\n    },\n  };\n\n  const result = (\n    await post<{ data: refreshRemoteTssReturnType }>(\n      `${remoteClient.remoteClientUrl}/api/v3/mpc/refresh_tss`,\n      { dataRequired },\n      {\n        headers: {\n          Authorization: `Bearer ${remoteClient.remoteClientToken}`,\n        },\n      }\n    )\n  ).data;\n\n  tKey.metadata.addTSSData({\n    tssTag: result.tssTag,\n    tssNonce: result.tssNonce,\n    tssPolyCommits: result.tssPolyCommits.map((commit) => TkeyPoint.fromJSON(commit)),\n    factorPubs: result.factorPubs.map((pub) => TkeyPoint.fromJSON(pub)),\n    factorEncs: result.factorEncs,\n  });\n\n  if (updateMetadata) {\n    await tKey._syncShareMetadata();\n  }\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: TkeyPoint,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  remoteClient?: IRemoteClientState\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  if (!remoteClient) {\n    await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n  } else {\n    await remoteRefreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, signatures, remoteClient);\n  }\n}\n\nexport async function deleteFactorAndRefresh(\n  tKey: ThresholdKey,\n  factorPubToDelete: TkeyPoint,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  remoteClient?: IRemoteClientState\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  if (!remoteClient) {\n    await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n  } else {\n    await remoteRefreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, signatures, remoteClient);\n  }\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n\nexport function Web3AuthStateFromJSON(result: StringifiedType): Web3AuthState {\n  if (!result.factorKey) throw new Error(\"factorKey not found in JSON\");\n  if (!result.tssShareIndex) throw new Error(\"tssShareIndex not found in JSON\");\n\n  const factorKey = new BN(result.factorKey as string, \"hex\");\n  const tssPubKey = Buffer.from(result.tssPubKey as Buffer);\n  return {\n    factorKey,\n    oAuthKey: result.oAuthKey as string,\n    tssShareIndex: parseInt(result.tssShareIndex as string),\n    tssPubKey,\n    signatures: result.signatures as string[],\n    userInfo: result.userInfo as UserInfo,\n  };\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { ICoreKit, IStorage, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: SupportedStorageType = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/share-serialization\");","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","export * from \"./browserStorage\";\nexport * from \"./factorSerialization\";\nexport * from \"./securityQuestion\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"hi-base32\");","import { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { log } from \"@web3auth/base\";\nimport BN from \"bn.js\";\nimport type { ec } from \"elliptic\";\nimport base32 from \"hi-base32\";\n\nimport { CURVE } from \"../../constants\";\nimport { IRemoteClientState, Web3AuthMPCCoreKit } from \"../../index\";\n\nexport class AuthenticatorService {\n  private backendUrl: string;\n\n  private coreKitInstance: Web3AuthMPCCoreKit;\n\n  private authenticatorType: string = \"authenticator\";\n\n  private factorPub: string = \"\";\n\n  private tssIndex: number;\n\n  constructor(params: { backendUrl: string; coreKitInstance: Web3AuthMPCCoreKit; authenticatorType?: string }) {\n    const { backendUrl } = params;\n    this.backendUrl = backendUrl;\n    this.authenticatorType = params.authenticatorType || \"authenticator\";\n    this.coreKitInstance = params.coreKitInstance;\n    // this.remoteClient = remoteClient || false;\n  }\n\n  getDescriptionsAndUpdate() {\n    const arrayOfDescriptions = Object.entries(this.coreKitInstance.getKeyDetails().shareDescriptions).map(([key, value]) => {\n      const parsedDescription = (value || [])[0] ? JSON.parse(value[0]) : {};\n      return {\n        key,\n        description: parsedDescription,\n      };\n    });\n\n    const shareDescriptionsMobile = arrayOfDescriptions.find(({ description }) => description.authenticator === this.authenticatorType);\n    log.info(\"shareDescriptionsMobile\", shareDescriptionsMobile);\n\n    if (shareDescriptionsMobile) {\n      this.factorPub = shareDescriptionsMobile.key;\n      this.tssIndex = shareDescriptionsMobile.description.tssShareIndex;\n    }\n\n    return shareDescriptionsMobile;\n  }\n\n  generateSecretKey(): string {\n    const key = generatePrivate().subarray(0, 20);\n    return base32.encode(key).toString().replace(/=/g, \"\");\n  }\n\n  async register(privKey: BN, secretKey: string): Promise<{ success: boolean; message?: string }> {\n    const privKeyPair: ec.KeyPair = CURVE.keyFromPrivate(privKey.toString(16, 64));\n    const pubKey = privKeyPair.getPublic();\n    const sig = CURVE.sign(keccak256(Buffer.from(secretKey, \"utf8\")), Buffer.from(privKey.toString(16, 64), \"hex\"));\n\n    const data = {\n      pubKey: {\n        x: pubKey.getX().toString(16, 64),\n        y: pubKey.getY().toString(16, 64),\n      },\n      sig: {\n        r: sig.r.toString(16, 64),\n        s: sig.s.toString(16, 64),\n        v: new BN(sig.recoveryParam as number).toString(16, 2),\n      },\n      secretKey,\n    };\n\n    const resp = await post<{\n      success: boolean;\n      message: string;\n    }>(`${this.backendUrl}/api/v3/register`, data);\n\n    return resp;\n  }\n\n  async addRecovery(address: string, code: string, factorKey: BN) {\n    if (!factorKey) throw new Error(\"factorKey is not defined\");\n    if (!address) throw new Error(\"address is not defined\");\n    if (!code) throw new Error(\"code is not defined\");\n\n    const data = {\n      address,\n      code,\n      data: {\n        // If the verification is complete, we save the factorKey for the user address.\n        // This factorKey is used to verify the user in the future on a new device and recover tss share.\n        factorKey: factorKey.toString(16, 64),\n      },\n    };\n\n    await post(`${this.backendUrl}/api/v3/verify`, data);\n  }\n\n  async verifyRecovery(address: string, code: string): Promise<BN | undefined> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify`, verificationData);\n    const { data } = response;\n    return data ? new BN(data.factorKey, \"hex\") : undefined;\n  }\n\n  async verifyRemoteSetup(address: string, code: string): Promise<IRemoteClientState & { tssShareIndex: string }> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify_remote`, verificationData);\n    const { data } = response;\n\n    return {\n      tssShareIndex: this.tssIndex.toString(),\n      remoteClientUrl: this.backendUrl,\n      remoteFactorPub: this.factorPub,\n      metadataShare: data.metadataShare,\n      remoteClientToken: data.signature,\n    };\n  }\n}\n","import { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { log } from \"@web3auth/base\";\nimport BN from \"bn.js\";\nimport type { ec } from \"elliptic\";\n\nimport { CURVE } from \"../../constants\";\nimport { IRemoteClientState } from \"../../interfaces\";\nimport { Web3AuthMPCCoreKit } from \"../../mpcCoreKit\";\n\nexport class SmsService {\n  private backendUrl: string;\n\n  private coreKitInstance: Web3AuthMPCCoreKit;\n\n  private authenticatorType: string = \"sms\";\n\n  private factorPub: string = \"\";\n\n  private tssIndex: number;\n\n  constructor(params: { backendUrl: string; coreKitInstance: Web3AuthMPCCoreKit; authenticatorType?: string }) {\n    const { backendUrl } = params;\n    this.backendUrl = backendUrl;\n    this.authenticatorType = params.authenticatorType || \"sms\";\n    this.coreKitInstance = params.coreKitInstance;\n    this.getDescriptionsAndUpdate();\n  }\n\n  getDescriptionsAndUpdate() {\n    const arrayOfDescriptions = Object.entries(this.coreKitInstance.getKeyDetails().shareDescriptions).map(([key, value]) => {\n      const parsedDescription = (value || [])[0] ? JSON.parse(value[0]) : {};\n      return {\n        key,\n        description: parsedDescription,\n      };\n    });\n\n    const shareDescriptionsMobile = arrayOfDescriptions.find(({ description }) => description.authenticator === this.authenticatorType);\n    log.info(\"shareDescriptionsMobile\", shareDescriptionsMobile);\n\n    if (shareDescriptionsMobile) {\n      this.factorPub = shareDescriptionsMobile.key;\n      this.tssIndex = shareDescriptionsMobile.description.tssShareIndex;\n    }\n\n    return shareDescriptionsMobile;\n  }\n\n  async register(privKey: BN, number: string): Promise<string | undefined> {\n    const privKeyPair: ec.KeyPair = CURVE.keyFromPrivate(privKey.toString(16, 64));\n    const pubKey = privKeyPair.getPublic();\n    const sig = CURVE.sign(keccak256(Buffer.from(number, \"utf8\")), Buffer.from(privKey.toString(16, 64), \"hex\"));\n\n    const data = {\n      pubKey: {\n        x: pubKey.getX().toString(16, 64),\n        y: pubKey.getY().toString(16, 64),\n      },\n      sig: {\n        r: sig.r.toString(16, 64),\n        s: sig.s.toString(16, 64),\n        v: new BN(sig.recoveryParam as number).toString(16, 2),\n      },\n      number,\n    };\n\n    await post<{\n      success: boolean;\n      id_token?: string;\n      message: string;\n    }>(`${this.backendUrl}/api/v3/register`, data);\n\n    // this is to send sms to the user instantly after registration.\n    const startData = {\n      address: `${pubKey.getX().toString(16, 64)}${pubKey.getY().toString(16, 64)}`,\n    };\n\n    // Sends the user sms.\n    const resp2 = await post<{ success: boolean; code?: string }>(`${this.backendUrl}/api/v3/start`, startData);\n    // if (resp2.status !== 200) throw new Error(\"Error sending sms\");\n    return resp2.code;\n  }\n\n  async addSmsRecovery(address: string, code: string, factorKey: BN) {\n    if (!factorKey) throw new Error(\"factorKey is not defined\");\n    if (!address) throw new Error(\"address is not defined\");\n\n    const data = {\n      address,\n      code,\n      data: {\n        // If the verification is complete, we save the factorKey for the user address.\n        // This factorKey is used to verify the user in the future on a new device and recover tss share.\n        factorKey: factorKey.toString(16, 64),\n      },\n    };\n\n    await post(`${this.backendUrl}/api/v3/verify`, data);\n  }\n\n  async requestOTP(address: string): Promise<string | undefined> {\n    const startData = {\n      address,\n    };\n    const resp2 = await post<{ success?: boolean; code?: string }>(`${this.backendUrl}/api/v3/start`, startData);\n    // eslint-disable-next-line no-console\n    console.log(resp2);\n    return resp2.code;\n  }\n\n  async verifyRecovery(address: string, code: string): Promise<BN | undefined> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify`, verificationData);\n    const { data } = response;\n    return data ? new BN(data.factorKey, \"hex\") : undefined;\n  }\n\n  async verifyRemoteSetup(address: string, code: string): Promise<IRemoteClientState & { tssShareIndex: string }> {\n    const verificationData = {\n      address,\n      code,\n    };\n\n    const response = await post<{ data?: Record<string, string> }>(`${this.backendUrl}/api/v3/verify_remote`, verificationData);\n    const { data } = response;\n\n    return {\n      tssShareIndex: this.tssIndex.toString(),\n      remoteClientUrl: this.backendUrl,\n      remoteFactorPub: this.factorPub,\n      metadataShare: data.metadataShare,\n      remoteClientToken: data.signature,\n    };\n  }\n}\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\";\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nexport interface InitParams {\n  handleRedirectResult: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = SubVerifierDetailsParams | AggregateVerifierLoginParams;\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n}\n\nexport interface IRemoteClientState {\n  remoteFactorPub: string;\n  remoteClientUrl: string;\n  remoteClientToken: string;\n  metadataShare: string;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n  remoteClient?: IRemoteClientState;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: \"session\" | \"local\" | \"memory\" | IStorage;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `[]`\n   * Server hostUrl for authorization before signing or refresh.\n   * Will request for authorization every signing or refresh if being set.\n   * Required for remote client setup.\n   */\n  authorizationUrl?: string[];\n\n  /**\n   * @defaultValue `false`\n   * Allow no authorization requirement for remote client setup.\n   * if AuthorizationUrl is set, this option will be ignored.\n   */\n  allowNoAuthorizationForRemoteClient?: boolean;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n  remoteClient?: IRemoteClientState;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/service-provider-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/storage-layer-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/customauth\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-session-manager\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tss-client\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth-mpc/ethereum-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n  BNString,\n  encrypt,\n  EncryptedMessage,\n  getPubKeyPoint,\n  Point as TkeyPoint,\n  SHARE_DELETED,\n  ShareStore,\n  StringifiedType,\n} from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError, lagrangeInterpolation } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\n// import { name, version } from \"../package.json\";\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    // log.info(\"======================================================\");\n    // log.info(`WEB3AUTH SDK : ${name}:${version}`);\n\n    // log.info(\"======================================================\");\n\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n    if (options.uxMode === \"nodejs\" && [\"local\", \"session\"].includes(options.storageKey.toString())) {\n      throw new Error(`nodejs mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (options.uxMode === \"nodejs\" && !options.tssLib) {\n      throw new Error(`nodejs mode requires tssLib`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = `${window.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.authorizationUrl) options.authorizationUrl = [];\n    if (!options.allowNoAuthorizationForRemoteClient) options.allowNoAuthorizationForRemoteClient = false;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || (!this.state.factorKey && !this.state.remoteClient)) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  public async _UNSAFE_recoverTssKey(factorKey: string[]) {\n    this.checkReady();\n    const factorKeyBN = new BN(factorKey[0], \"hex\");\n\n    const shareStore0 = await this.getFactorKeyMetadata(factorKeyBN);\n    await this.tKey.initialize({ withShare: shareStore0 });\n\n    this.tkey.privKey = new BN(factorKey[1], \"hex\");\n\n    const tssShares: BN[] = [];\n    const tssIndexes: number[] = [];\n    const tssIndexesBN: BN[] = [];\n    for (let i = 0; i < factorKey.length; i++) {\n      const factorKeyBNInput = new BN(factorKey[i], \"hex\");\n      const { tssIndex, tssShare } = await this.tKey.getTSSShare(factorKeyBNInput);\n      if (tssIndexes.includes(tssIndex)) {\n        await this.init();\n        throw new Error(\"Duplicate TSS Index\");\n      }\n      tssIndexes.push(tssIndex);\n      tssIndexesBN.push(new BN(tssIndex));\n      tssShares.push(tssShare);\n    }\n\n    const finalKey = lagrangeInterpolation(tssShares, tssIndexesBN);\n    await this.init();\n    return finalKey.toString(\"hex\");\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl ? this.options.baseUrl : `${window.location.origin}/serviceworker`,\n        uxMode: this.options.uxMode === \"nodejs\" ? UX_MODE.REDIRECT : this.options.uxMode,\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (this.sessionManager.sessionId) {\n      await this.rehydrateSession();\n      if (this.state.factorKey || this.state.remoteClient) await this.setupProvider();\n    }\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams, importTssKey?: string): Promise<void> {\n    this.checkReady();\n\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams, importTssKey?: string): Promise<void> {\n    this.checkReady();\n\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey(importTssKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    if (this.state.remoteClient) throw new Error(\"remoteClient is present, inputFactorKey are not allowed\");\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    let browserData;\n\n    if (this.options.uxMode === \"nodejs\") {\n      browserData = {\n        browserName: \"Node Env\",\n        browserVersion: \"\",\n        deviceName: \"nodejs\",\n      };\n    } else {\n      const browserInfo = bowser.parse(navigator.userAgent);\n      const browserName = `${browserInfo.browser.name}`;\n      browserData = {\n        browserName,\n        browserVersion: browserInfo.browser.version,\n        deviceName: browserInfo.os.name,\n      };\n    }\n\n    const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n    storeWebBrowserFactor(deviceFactorKey, this);\n    await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n    const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n    await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n    await this.deleteMetadataShareBackup(hashedFactorKey);\n\n    // only recovery factor = true\n    if (recoveryFactor) {\n      const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n      return backupFactorKey;\n    }\n    // update to undefined for next major release\n    return \"\";\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return tssPubKey;\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    if (this.state.remoteClient) {\n      return this.remoteSign(msgHash);\n    }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    let { tssShareIndex, tssPubKey } = this.state;\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.options.uxMode === \"nodejs\") {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n\n    const signatures = await this.getSigningSignatures(\"delete factor\");\n    if (this.state.remoteClient) {\n      const remoteStateFpp = this.state.remoteClient.remoteFactorPub;\n      if (fpp.equals(Point.fromTkeyPoint(getPubKeyPoint(new BN(remoteStateFpp, \"hex\"))))) {\n        throw new Error(\"Cannot delete current active factor\");\n      }\n      await deleteFactorAndRefresh(\n        this.tKey,\n        factorPub,\n        new BN(0), // not used in remoteClient\n        signatures,\n        this.state.remoteClient\n      );\n    } else {\n      const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n      if (fpp.equals(stateFpp)) {\n        throw new Error(\"Cannot delete current active factor\");\n      }\n      await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, signatures);\n    }\n\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  public async setupRemoteClient(params: {\n    remoteClientUrl: string;\n    remoteFactorPub: string;\n    metadataShare: string;\n    remoteClientToken: string;\n    tssShareIndex: string;\n  }): Promise<Promise<void>> {\n    const { remoteClientUrl, remoteFactorPub, metadataShare, remoteClientToken, tssShareIndex } = params;\n\n    const remoteClient = {\n      remoteClientUrl: remoteClientUrl.at(-1) === \"/\" ? remoteClientUrl.slice(0, -1) : remoteClientUrl,\n      remoteFactorPub,\n      metadataShare,\n      remoteClientToken,\n    };\n\n    const sharestore = ShareStore.fromJSON(JSON.parse(metadataShare));\n    this.tkey.inputShareStoreSafe(sharestore);\n    await this.tKey.reconstructKey();\n\n    // setup Tkey\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n    this.updateState({ tssShareIndex: parseInt(tssShareIndex), tssPubKey, remoteClient });\n\n    // // Finalize setup.\n    // setup provider\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    await this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (this.state.remoteClient) throw new Error(\"export tss key not supported for remote client\");\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(importTssKey?: string): Promise<void> {\n    if (this.state.remoteClient) {\n      log.warn(\"remote client is present, setupTkey are skipped\");\n      return;\n    }\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n      }\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      if (!importTssKey) {\n        const deviceTSSShare = new BN(generatePrivate());\n        await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n      } else {\n        await this.tKey.initialize();\n        await this.importTssKey(importTssKey, factorPub, deviceTSSIndex);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      if (importTssKey) throw new Error(\"Cannot import tss key for existing user\");\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.web3AuthClientId);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession() {\n    try {\n      this.checkReady();\n\n      if (!this.sessionManager.sessionId) return {};\n      const result = await this.sessionManager.authorizeSession();\n      if (!result.factorKey && !result.remoteClient) throw new Error(\"factorKey not present\");\n      let metadataShare;\n\n      if (result.factorKey) {\n        const factorKey = new BN(result.factorKey, \"hex\");\n        if (!factorKey) {\n          throw new Error(\"Invalid factor key\");\n        }\n        metadataShare = await this.getFactorKeyMetadata(factorKey);\n      } else {\n        metadataShare = ShareStore.fromJSON(JSON.parse(result.remoteClient.metadataShare));\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(metadataShare, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n        remoteClient: result.remoteClient,\n      });\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    if (this.options.sessionTime === 0) {\n      log.info(\"sessionTime is 0, not creating session\");\n      return;\n    }\n\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey, remoteClient } = this.state;\n      if (!this.state.factorKey && !this.state.remoteClient) throw new Error(\"factorKey not present\");\n\n      if (!this.state.remoteClient) {\n        const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n        if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n          throw new Error(\"User not logged in\");\n        }\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n        remoteClient,\n      };\n      await this.sessionManager.createSession(payload);\n      this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey && !this.state.remoteClient) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    const signatures = await this.getSigningSignatures(\"create factor\");\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      // Generate new share.\n      if (!this.state.remoteClient) {\n        await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, signatures);\n      } else {\n        await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, signatures, this.state.remoteClient);\n      }\n      return;\n    }\n    // TODO : fix this\n    let userEnc: EncryptedMessage;\n    if (this.state.remoteClient) {\n      const remoteFactorPub = TkeyPoint.fromCompressedPub(this.state.remoteClient.remoteFactorPub);\n      const factorEnc = this.tkey.getFactorEncs(remoteFactorPub);\n      const tssCommits = this.tkey.getTSSCommits();\n      const dataRequired = {\n        factorEnc,\n        tssCommits,\n        factorPub: newFactorPub,\n      };\n\n      userEnc = (\n        await post<{ data?: EncryptedMessage }>(\n          `${this.state.remoteClient.remoteClientUrl}/api/v3/mpc/copy_tss_share`,\n          { dataRequired },\n          {\n            headers: {\n              Authorization: `Bearer ${this.state.remoteClient.remoteClientToken}`,\n            },\n          }\n        )\n      ).data;\n    } else {\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      userEnc = await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare));\n    }\n\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc,\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    // if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.tkey = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    if (this.options.authorizationUrl.length === 0) {\n      if (this.state.remoteClient && !this.options.allowNoAuthorizationForRemoteClient) {\n        throw new Error(\"remote client is present, authorizationUrl is required\");\n      }\n      return this.signatures;\n    }\n    const sigPromise = this.options.authorizationUrl.map(async (url) => {\n      const { sig } = await post<{ sig?: string }>(url, {\n        signatures: this.signatures,\n        verifier: this.verifier,\n        verifierID: this.verifierId,\n        clientID: this.options.web3AuthClientId,\n        data,\n      });\n\n      return sig;\n    });\n    return Promise.all(sigPromise);\n  }\n\n  public async remoteSign(msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> {\n    if (!this.state.remoteClient.remoteClientUrl) throw new Error(\"remoteClientUrl not present\");\n\n    // PreSetup\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    const tssCommits = this.tKey.getTSSCommits();\n\n    const tssNonce = this.getTssNonce() || 0;\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n\n    if (parties - 1 > nodeIndexes.length) {\n      throw new Error(`Not enough nodes to perform TSS - parties :${parties}, nodeIndexes:${nodeIndexes.length}`);\n    }\n    const { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned } = generateTSSEndpoints(\n      torusNodeTSSEndpoints,\n      parties,\n      clientIndex,\n      nodeIndexes\n    );\n\n    const factor = TkeyPoint.fromCompressedPub(this.state.remoteClient.remoteFactorPub);\n    const factorEnc = this.tKey.getFactorEncs(factor);\n\n    const data = {\n      dataRequired: {\n        factorEnc,\n        sessionId,\n        tssNonce,\n        nodeIndexes: nodeIndexesReturned,\n        tssCommits: tssCommits.map((commit) => commit.toJSON()),\n        signatures: await this.getSigningSignatures(msgHash.toString(\"hex\")),\n        serverEndpoints: { endpoints, tssWSEndpoints, partyIndexes },\n      },\n      msgHash: msgHash.toString(\"hex\"),\n    };\n\n    const result = await post<{ data?: Record<string, string> }>(`${this.state.remoteClient.remoteClientUrl}/api/v3/mpc/sign`, data, {\n      headers: {\n        Authorization: `Bearer ${this.state.remoteClient.remoteClientToken}`,\n      },\n    });\n    const { r, s, v } = result.data as { v: string; r: string; s: string };\n    return { v: parseInt(v), r: Buffer.from(r, \"hex\"), s: Buffer.from(s, \"hex\") };\n  }\n}\n","export * from \"./constants\";\nexport * from \"./helper\";\nexport * from \"./helper/authenticator/authenticatorService\";\nexport * from \"./helper/authenticator/smsService\";\nexport * from \"./interfaces\";\nexport * from \"./mpcCoreKit\";\nexport * from \"./point\";\nexport * from \"./utils\";\n"],"names":["TORUS_SAPPHIRE_NETWORK","CHAIN_NAMESPACES","ec","EllipticCurve","DEFAULT_CHAIN_CONFIG","chainNamespace","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","MAX_FACTORS","SOCIAL_TKEY_INDEX","getPubKeyPoint","Point","TkeyPoint","randomSelection","generatePrivate","post","keccak256","BN","VALID_TSS_INDICES","generateFactorKey","factorKey","factorPub","private","pub","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64Url","split","base64","replace","JSON","parse","atob","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","undefined","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","remoteRefreshTssShares","remoteClient","finalSelectedServers","tssCommits","metadata","tssPolyCommits","tssTag","tssNonce","tssNonces","pubKey","newTSSServerPub","getTSSPubKey","slice","min","factorEnc","getFactorEncs","fromCompressedPub","remoteFactorPub","dataRequired","toJSON","targetIndexes","commit","serverOpts","result","remoteClientUrl","headers","Authorization","remoteClientToken","data","addTSSData","fromJSON","factorEncs","_syncShareMetadata","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","indexOf","isArray","existingFactorPubs","updatedFactorPubs","concat","existingTSSIndexes","fb","updatedTSSIndexes","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","Web3AuthStateFromJSON","tssShareIndex","tssPubKey","oAuthKey","parseInt","userInfo","MemoryStorage","constructor","_defineProperty","getItem","key","_store","value","clear","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","instance","currStore","getStore","stringify","get","store","set","remove","_class2","storeWebBrowserFactor","mpcCoreKit","getMetadata","currentStorage","tkeyPubX","toString","padStart","getWebBrowserFactor","tKeyLocalStoreString","tKeyLocalStore","ShareSerializationModule","mnemonicToKey","shareMnemonic","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","mnemonic","serializeMnemonic","ZERO_POINT","g","mul","fromPrivateKey","privateKey","ep","keyFromPrivate","getPublic","fromTkeyPoint","keyFromPublic","y","fromBufferSEC1","buf","toTkeyPoint","isInfinity","getX","getY","toBufferSEC1","compressed","encode","equals","tkeyPoint","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","json","TssSecurityQuestion","setSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","storeData","setGeneralStoreDomain","manualSync","changeSecurityQuestion","newQuestion","newAnswer","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","state","inputFactorKey","deleteFactor","deleteSecurityQuestion","deleteFactorKey","deleteGeneralStoreDomain","recoverFactor","getQuestion","log","base32","AuthenticatorService","backendUrl","authenticatorType","coreKitInstance","getDescriptionsAndUpdate","arrayOfDescriptions","Object","entries","shareDescriptions","_ref","parsedDescription","shareDescriptionsMobile","find","_ref2","authenticator","info","generateSecretKey","subarray","register","privKey","secretKey","privKeyPair","sig","sign","r","v","recoveryParam","resp","addRecovery","address","code","verifyRecovery","verificationData","response","verifyRemoteSetup","metadataShare","signature","SmsService","number","startData","resp2","addSmsRecovery","requestOTP","console","COREKIT_STATUS","encrypt","SHARE_DELETED","ShareStore","ThresholdKey","CoreError","lagrangeInterpolation","TorusServiceProvider","TorusStorageLayer","AGGREGATE_VERIFIER","TORUS_METHOD","UX_MODE","NodeDetailManager","OpenloginSessionManager","TorusUtils","Client","getDKLSCoeff","setupSockets","EthereumSigningProvider","bowser","Web3AuthMPCCoreKit","options","checkReady","factorPubsList","msgHash","remoteSign","localSign","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","getTssNonce","vid","sessionId","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","uxMode","tssLib","default","sockets","Promise","all","dklsCoeff","denormalisedShare","umod","curve","n","share","getSigningSignatures","client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","chainConfig","web3AuthClientId","enableLogging","enableAll","setLevel","web3AuthNetwork","sessionTime","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","authorizationUrl","allowNoAuthorizationForRemoteClient","_storageBaseKey","sessionManager","network","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","status","NOT_INITIALIZED","INITIALIZED","REQUIRED_SHARE","LOGGED_IN","e","_this$state$userInfo","_this$state3","aggregateVerifier","_this$state4","isRedirectMode","_UNSAFE_recoverTssKey","shareStore0","getFactorKeyMetadata","initialize","withShare","tssShares","tssIndexes","tssIndexesBN","factorKeyBNInput","init","finalKey","_window","_window2","handleRedirectResult","resetState","nodeDetails","torusSp","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","hostUrl","shareSerializationModule","modules","shareSerialization","skipSw","skipPrefetch","POPUP","rehydrateSession","setupProvider","loginWithOauth","importTssKey","tkeyServiceProvider","verifierParams","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","message","loginWithJWT","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getTorusKey","verifier_id","extraVerifierParams","additionalParams","verifierType","getAggregateTorusKey","oAuthShare","verifierName","getRedirectResult","method","TRIGGER_LOGIN","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFA","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","backupFactorKey","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","remainingFactors","fpp","remoteStateFpp","stateFpp","factorPubHex","allDesc","getShareDescription","keyDesc","forEach","desc","_this$tKey","deleteShareDescription","derivedFactorPub","logout","invalidateSession","tkeyDetails","factors","keyDetails","requiredFactors","requiredShares","threshold","totalFactors","metadataPubKey","commitChanges","syncLocalMetadataTransitions","setManualSync","setupRemoteClient","at","sharestore","createSession","tssKey","newTSSIndex","tssKeyBN","tag","importKey","_UNSAFE_exportTssKey","exportTssKey","warn","existingUser","isMetadataPresent","deviceTSSIndex","deviceTSSShare","HashedShare","neverInitializeNewKey","authorizeSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","keys","_this$tKey3","_this$tKey4","userEnc","getTSSCommits","factorPubID","serverEncs","getMetadataShare","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","_this$tKey8","module","addShareDescription","signingProvider","config","newState","getPostboxKey","session","sigPromise","url","verifierID","clientID","factor"],"sourceRoot":""}