{"version":3,"file":"mpcCoreKit.cjs.js","mappings":"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","sources":["webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-lib\"","webpack://@web3auth/mpc-core-kit/webpack/bootstrap","webpack://@web3auth/mpc-core-kit/webpack/runtime/compat get default export","webpack://@web3auth/mpc-core-kit/webpack/runtime/create fake namespace object","webpack://@web3auth/mpc-core-kit/webpack/runtime/define property getters","webpack://@web3auth/mpc-core-kit/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/mpc-core-kit/webpack/runtime/make namespace object","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/constants\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"elliptic\"","webpack://@web3auth/mpc-core-kit/./src/constants.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/common-types\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/torus.js\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bn.js\"","webpack://@web3auth/mpc-core-kit/./src/utils.ts","webpack://@web3auth/mpc-core-kit/./src/helper/browserStorage.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/share-serialization\"","webpack://@web3auth/mpc-core-kit/./src/helper/factorSerialization.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@web3auth/mpc-core-kit/./src/point.ts","webpack://@web3auth/mpc-core-kit/./src/helper/securityQuestion.ts","webpack://@web3auth/mpc-core-kit/./src/helper/index.ts","webpack://@web3auth/mpc-core-kit/./src/interfaces.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/core\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/service-provider-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/storage-layer-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/customauth\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/openlogin-session-manager\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-client\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth-mpc/ethereum-provider\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bowser\"","webpack://@web3auth/mpc-core-kit/./src/mpcCoreKit.ts","webpack://@web3auth/mpc-core-kit/./src/index.ts"],"sourcesContent":["module.exports = require(\"@toruslabs/tss-lib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { getPubKeyPoint, Point, Point as TkeyPoint, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nasync function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: Point[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: Point,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[]\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport async function deleteFactorAndRefresh(tKey: ThresholdKey, factorPubToDelete: Point, factorKeyForExistingTSSShare: BN, signatures: string[]) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { ICoreKit, IStorage, SupportedStorageType, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/share-serialization\");","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport type { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  /**\n   * Creates a new Point from a private Key.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","export * from \"./browserStorage\";\nexport * from \"./factorSerialization\";\nexport * from \"./securityQuestion\";\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\" | \"react-native\";\n\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport interface InitParams {\n  handleRedirectResult: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = SubVerifierDetailsParams | AggregateVerifierLoginParams;\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: SupportedStorageType;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `Web3AuthOptions.web3AuthClientId`\n   * Overwrites the default value ( clientId ) used as nonce for hashing the hash factor key.\n   *\n   * If you want to aggregate the mfa status of client id 1 and client id 2  apps\n   * set hashedFactorNonce to some common clientID, which can be either client id 1 or client id 2 or any other unique string\n   * #PR 72\n   * Do not use this unless you know what you are doing.\n   */\n  hashedFactorNonce?: string;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/service-provider-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/storage-layer-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/customauth\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-session-manager\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tss-client\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth-mpc/ethereum-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","/* eslint-disable @typescript-eslint/member-ordering */\nimport { BNString, encrypt, getPubKeyPoint, Point as TkeyPoint, SHARE_DELETED, ShareStore, StringifiedType } from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n    if ((options.uxMode === \"nodejs\" || options.uxMode === \"react-native\") && [\"local\", \"session\"].includes(options.storageKey.toString())) {\n      throw new Error(`nodejs mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = `${window?.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.hashedFactorNonce) options.hashedFactorNonce = options.web3AuthClientId;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || !this.state.factorKey) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl ? this.options.baseUrl : `${window.location.origin}/serviceworker`,\n        uxMode: this.options.uxMode === \"nodejs\" || this.options.uxMode === \"react-native\" ? UX_MODE.REDIRECT : this.options.uxMode,\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (this.sessionManager.sessionId) {\n      await this.rehydrateSession();\n      if (this.state.factorKey) await this.setupProvider();\n    }\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams): Promise<void> {\n    this.checkReady();\n\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void> {\n    this.checkReady();\n\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    try {\n      let browserData;\n\n      if (this.options.uxMode === \"nodejs\" || this.options.uxMode === \"react-native\") {\n        browserData = {\n          browserName: \"Node Env\",\n          browserVersion: \"\",\n          deviceName: \"nodejs\",\n        };\n      } else {\n        // try {\n        const browserInfo = bowser.parse(navigator.userAgent);\n        const browserName = `${browserInfo.browser.name}`;\n        browserData = {\n          browserName,\n          browserVersion: browserInfo.browser.version,\n          deviceName: browserInfo.os.name,\n        };\n      }\n      const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n      storeWebBrowserFactor(deviceFactorKey, this);\n      await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n      const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n      await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n      await this.deleteMetadataShareBackup(hashedFactorKey);\n\n      // only recovery factor = true\n      if (recoveryFactor) {\n        const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n        return backupFactorKey;\n      }\n      // update to undefined for next major release\n      return \"\";\n    } catch (err: unknown) {\n      log.error(\"error enabling MFA\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return tssPubKey;\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    // if (this.state.remoteClient) {\n    //   return this.remoteSign(msgHash);\n    // }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    let { tssShareIndex, tssPubKey } = this.state;\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.options.uxMode === \"nodejs\") {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n    const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n    if (fpp.equals(stateFpp)) {\n      throw new Error(\"Cannot delete current active factor\");\n    }\n\n    await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, this.signatures);\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(): Promise<void> {\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      }\n      const deviceTSSShare = new BN(generatePrivate());\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession() {\n    try {\n      this.checkReady();\n\n      if (!this.sessionManager.sessionId) return {};\n      const result = await this.sessionManager.authorizeSession();\n      const factorKey = new BN(result.factorKey, \"hex\");\n      if (!factorKey) {\n        throw new Error(\"Invalid factor key\");\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n      });\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey } = this.state;\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n        throw new Error(\"User not logged in\");\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n      };\n      await this.sessionManager.createSession(payload);\n      this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n      // Generate new share.\n      await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, this.signatures);\n\n      // Update local share.\n      const { tssIndex } = await this.tKey.getTSSShare(this.state.factorKey);\n      this.updateState({\n        tssShareIndex: tssIndex,\n      });\n      return;\n    }\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc: await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare)),\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.tkey = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    log.info(\"data\", data);\n    return this.signatures;\n  }\n}\n","export * from \"./constants\";\nexport * from \"./helper\";\nexport * from \"./interfaces\";\nexport * from \"./mpcCoreKit\";\nexport * from \"./point\";\nexport * from \"./utils\";\n"],"names":["TORUS_SAPPHIRE_NETWORK","CHAIN_NAMESPACES","ec","EllipticCurve","DEFAULT_CHAIN_CONFIG","chainNamespace","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","MAX_FACTORS","SOCIAL_TKEY_INDEX","getPubKeyPoint","randomSelection","generatePrivate","keccak256","BN","VALID_TSS_INDICES","generateFactorKey","factorKey","factorPub","private","pub","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64Url","split","base64","replace","JSON","parse","atob","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","undefined","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","indexOf","metadata","isArray","tssTag","existingFactorPubs","updatedFactorPubs","concat","existingTSSIndexes","fb","getFactorEncs","updatedTSSIndexes","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","slice","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","MemoryStorage","constructor","_defineProperty","getItem","key","_store","value","clear","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","instance","toJSON","result","currStore","getStore","stringify","get","store","set","remove","_class2","storeWebBrowserFactor","mpcCoreKit","getMetadata","currentStorage","tkeyPubX","pubKey","toString","padStart","getWebBrowserFactor","tKeyLocalStoreString","tKeyLocalStore","ShareSerializationModule","mnemonicToKey","shareMnemonic","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","mnemonic","serializeMnemonic","Point","TkeyPoint","ZERO_POINT","g","mul","fromPrivateKey","privateKey","ep","keyFromPrivate","getPublic","fromTkeyPoint","keyFromPublic","y","fromBufferSEC1","buf","toTkeyPoint","isInfinity","getX","getY","toBufferSEC1","compressed","encode","equals","tkeyPoint","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","fromJSON","json","TssSecurityQuestion","setSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","storeData","setGeneralStoreDomain","manualSync","_syncShareMetadata","changeSecurityQuestion","newQuestion","newAnswer","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","parseInt","state","inputFactorKey","deleteFactor","deleteSecurityQuestion","deleteFactorKey","fromCompressedPub","deleteGeneralStoreDomain","recoverFactor","getQuestion","COREKIT_STATUS","encrypt","SHARE_DELETED","ShareStore","ThresholdKey","CoreError","TorusServiceProvider","TorusStorageLayer","AGGREGATE_VERIFIER","TORUS_METHOD","UX_MODE","NodeDetailManager","OpenloginSessionManager","TorusUtils","Client","getDKLSCoeff","setupSockets","log","EthereumSigningProvider","bowser","Web3AuthMPCCoreKit","options","_window","checkReady","factorPubsList","tssPubKey","subarray","msgHash","localSign","tssShareIndex","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","tssNonce","getTssNonce","vid","sessionId","getTSSPubKey","tssNonces","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","uxMode","tssLib","default","sockets","Promise","all","dklsCoeff","denormalisedShare","umod","curve","n","share","getSigningSignatures","client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","r","recoveryParam","sign","v","chainConfig","web3AuthClientId","enableLogging","enableAll","setLevel","web3AuthNetwork","sessionTime","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","hashedFactorNonce","_storageBaseKey","sessionManager","network","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","oAuthKey","status","NOT_INITIALIZED","INITIALIZED","privKey","REQUIRED_SHARE","LOGGED_IN","e","_this$state$userInfo","_this$state3","userInfo","aggregateVerifier","_this$state4","isRedirectMode","init","_window2","_window3","handleRedirectResult","resetState","nodeDetails","torusSp","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","hostUrl","shareSerializationModule","modules","shareSerialization","skipSw","skipPrefetch","POPUP","rehydrateSession","setupProvider","loginWithOauth","tkeyServiceProvider","verifierParams","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","code","message","loginWithJWT","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getTorusKey","verifier_id","extraVerifierParams","additionalParams","verifierType","getAggregateTorusKey","oAuthShare","verifierName","getRedirectResult","method","TRIGGER_LOGIN","data","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","getFactorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFA","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","backupFactorKey","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","remainingFactors","fpp","stateFpp","factorPubHex","allDesc","getShareDescription","keyDesc","forEach","desc","_this$tKey","deleteShareDescription","derivedFactorPub","logout","invalidateSession","tkeyDetails","factors","keyDetails","requiredFactors","requiredShares","threshold","totalFactors","shareDescriptions","metadataPubKey","commitChanges","syncLocalMetadataTransitions","setManualSync","importTssKey","tssKey","newTSSIndex","tssKeyBN","tag","importKey","_UNSAFE_exportTssKey","exportTssKey","existingUser","isMetadataPresent","deviceTSSShare","deviceTSSIndex","initialize","HashedShare","neverInitializeNewKey","createSession","authorizeSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","Object","keys","_this$tKey3","info","_this$tKey4","factorEncs","factorPubID","userEnc","serverEncs","addTSSData","getMetadataShare","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","metadataShare","_this$tKey8","module","addShareDescription","signingProvider","config","newState","getPostboxKey","session","sig","signature"],"sourceRoot":""}