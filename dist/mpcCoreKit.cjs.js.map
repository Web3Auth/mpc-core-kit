{"version":3,"file":"mpcCoreKit.cjs.js","mappings":"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","sources":["webpack://@web3auth/mpc-core-kit/webpack/runtime/create fake namespace object","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-lib\"","webpack://@web3auth/mpc-core-kit/webpack/bootstrap","webpack://@web3auth/mpc-core-kit/webpack/runtime/compat get default export","webpack://@web3auth/mpc-core-kit/webpack/runtime/define property getters","webpack://@web3auth/mpc-core-kit/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/mpc-core-kit/webpack/runtime/make namespace object","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/constants\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"elliptic\"","webpack://@web3auth/mpc-core-kit/./src/constants.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/common-types\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/torus.js\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bn.js\"","webpack://@web3auth/mpc-core-kit/./src/utils.ts","webpack://@web3auth/mpc-core-kit/./src/helper/browserStorage.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/share-serialization\"","webpack://@web3auth/mpc-core-kit/./src/helper/factorSerialization.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@web3auth/mpc-core-kit/./src/point.ts","webpack://@web3auth/mpc-core-kit/./src/helper/securityQuestion.ts","webpack://@web3auth/mpc-core-kit/./src/interfaces.ts","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/core\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/service-provider-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@tkey-mpc/storage-layer-torus\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/customauth\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/openlogin-session-manager\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@toruslabs/tss-client\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"@web3auth-mpc/ethereum-provider\"","webpack://@web3auth/mpc-core-kit/external commonjs2 \"bowser\"","webpack://@web3auth/mpc-core-kit/./src/mpcCoreKit.ts"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","module.exports = require(\"@toruslabs/tss-lib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","import { TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { ec as EllipticCurve } from \"elliptic\";\n\nexport const DEFAULT_CHAIN_CONFIG: CustomChainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: \"0x5\",\n  rpcTarget: \"https://rpc.ankr.com/eth_goerli\",\n  displayName: \"Goerli Testnet\",\n  blockExplorer: \"https://goerli.etherscan.io\",\n  ticker: \"ETH\",\n  tickerName: \"Ethereum\",\n  decimals: 18,\n};\n\nexport const WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET,\n} as const;\n\nexport const USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\",\n} as const;\n\nexport enum FactorKeyTypeShareDescription {\n  HashedShare = \"hashedShare\",\n  SecurityQuestions = \"tssSecurityQuestions\",\n  DeviceShare = \"deviceShare\",\n  SeedPhrase = \"seedPhrase\",\n  PasswordShare = \"passwordShare\",\n  SocialShare = \"socialShare\",\n  Other = \"Other\",\n}\n\nexport const DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\",\n};\n\nexport const ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\",\n};\n\nexport const SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nexport enum TssShareType {\n  DEVICE = 2,\n  RECOVERY = 3,\n}\n\nexport const VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\n\nexport const SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nexport const FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\nexport const CURVE = new EllipticCurve(\"secp256k1\");\n\nexport const MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nexport const SOCIAL_TKEY_INDEX = 1;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { getPubKeyPoint, Point, Point as TkeyPoint, randomSelection } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { SCALAR_LEN, VALID_SHARE_INDICES as VALID_TSS_INDICES } from \"./constants\";\n\nexport const generateFactorKey = (): { private: BN; pub: TkeyPoint } => {\n  const factorKey = new BN(generatePrivate());\n  const factorPub = getPubKeyPoint(factorKey);\n  return { private: factorKey, pub: factorPub };\n};\n\nexport const generateTSSEndpoints = (tssNodeEndpoints: string[], parties: number, clientIndex: number, nodeIndexes: number[]) => {\n  const endpoints: string[] = [];\n  const tssWSEndpoints: string[] = [];\n  const partyIndexes: number[] = [];\n  const nodeIndexesReturned: number[] = [];\n\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null as any);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null as any);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return { endpoints, tssWSEndpoints, partyIndexes, nodeIndexesReturned };\n};\n\nexport function storageAvailable(type: string): boolean {\n  let storage: Storage;\n  try {\n    if (type === \"localStorage\") storage = window.localStorage;\n    else storage = window.sessionStorage;\n\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nexport function parseToken(token: string) {\n  const base64Url = token.split(\".\")[1];\n  const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n  return JSON.parse(atob(base64 || \"\"));\n}\n\n/**\n * Refreshes TSS shares. Allows to change number of shares. New user shares are\n * only produced for the target indices.\n * @param tKey - Tkey instance to use.\n * @param factorPubs - Factor pub keys after refresh.\n * @param tssIndices - Target tss indices to generate new shares for.\n * @param factorKeyForExistingTSSShare - Factor key for existing TSS share.\n * @param signatures - Signatures for authentication against RSS servers.\n */\nasync function refreshTssShares(\n  tKey: ThresholdKey,\n  factorPubs: Point[],\n  tssIndices: number[],\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[],\n  updateMetadata = false\n) {\n  const { tssShare, tssIndex } = await tKey.getTSSShare(factorKeyForExistingTSSShare);\n\n  const rssNodeDetails = await tKey._getRssNodeDetails();\n  const { serverEndpoints, serverPubKeys, serverThreshold } = rssNodeDetails;\n  const randomSelectedServers = randomSelection(\n    new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n    Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n  );\n\n  const verifierNameVerifierId = tKey.serviceProvider.getVerifierNameVerifierId();\n  await tKey._refreshTSSShares(updateMetadata, tssShare, tssIndex, factorPubs, tssIndices, verifierNameVerifierId, {\n    selectedServers: randomSelectedServers,\n    serverEndpoints,\n    serverPubKeys,\n    serverThreshold,\n    authSignatures: signatures,\n  });\n}\n\nexport async function addFactorAndRefresh(\n  tKey: ThresholdKey,\n  newFactorPub: Point,\n  newFactorTSSIndex: number,\n  factorKeyForExistingTSSShare: BN,\n  signatures: string[]\n) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (VALID_TSS_INDICES.indexOf(newFactorTSSIndex) === -1) {\n    throw new Error(`invalid new share index: must be one of ${VALID_TSS_INDICES}`);\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n  const existingTSSIndexes = existingFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n  const updatedTSSIndexes = existingTSSIndexes.concat([newFactorTSSIndex]);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport async function deleteFactorAndRefresh(tKey: ThresholdKey, factorPubToDelete: Point, factorKeyForExistingTSSShare: BN, signatures: string[]) {\n  if (!tKey) {\n    throw new Error(\"tkey does not exist, cannot add factor pub\");\n  }\n  if (!tKey.metadata.factorPubs || !Array.isArray(tKey.metadata.factorPubs[tKey.tssTag])) {\n    throw new Error(`factorPubs for tssTag = \"${tKey.tssTag}\" does not exist`);\n  }\n\n  const existingFactorPubs = tKey.metadata.factorPubs[tKey.tssTag];\n  const factorIndex = existingFactorPubs.findIndex((p) => p.x.eq(factorPubToDelete.x));\n  if (factorIndex === -1) {\n    throw new Error(`factorPub ${factorPubToDelete} does not exist`);\n  }\n\n  const updatedFactorPubs = existingFactorPubs.slice();\n  updatedFactorPubs.splice(factorIndex, 1);\n  const updatedTSSIndexes = updatedFactorPubs.map((fb) => tKey.getFactorEncs(fb).tssIndex);\n\n  await refreshTssShares(tKey, updatedFactorPubs, updatedTSSIndexes, factorKeyForExistingTSSShare, signatures);\n}\n\nexport const getHashedPrivateKey = (postboxKey: string, clientId: string): BN => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts a elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nexport function scalarBNToBufferSEC1(s: BN): Buffer {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\n","import BN from \"bn.js\";\n\nimport { FIELD_ELEMENT_HEX_LEN } from \"../constants\";\nimport { ICoreKit, IStorage, SupportedStorageType, TkeyLocalStoreData } from \"../interfaces\";\nimport { storageAvailable } from \"../utils\";\n\nexport class MemoryStorage implements IStorage {\n  private _store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this._store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this._store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this._store[key];\n  }\n\n  clear(): void {\n    this._store = {};\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: SupportedStorageType = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage | undefined;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = sessionStorage;\n      } else if (storageKey === \"memory\") {\n        storage = new MemoryStorage();\n      } else if (typeof storageKey === \"object\") {\n        storage = storageKey;\n      }\n\n      if (!storage) {\n        throw new Error(\"No valid storage available\");\n      }\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    const result = this.storage.getItem(this._storeKey);\n    if (!result) throw new Error(`storage ${this._storeKey} is null`);\n    return result;\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n\n  remove(key: string): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    delete store[key];\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport async function storeWebBrowserFactor(factorKey: BN, mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<void> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  currentStorage.set(\n    tkeyPubX,\n    JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\"),\n    } as TkeyLocalStoreData)\n  );\n}\n\nexport async function getWebBrowserFactor(mpcCoreKit: ICoreKit, storageKey: \"local\" | \"session\" = \"local\"): Promise<string | undefined> {\n  const metadata = mpcCoreKit.tKey.getMetadata();\n  const currentStorage = BrowserStorage.getInstance(\"mpc_corekit_store\", storageKey);\n\n  const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n  const tKeyLocalStoreString = currentStorage.get<string>(tkeyPubX);\n  const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\") as TkeyLocalStoreData;\n  return tKeyLocalStore.factorKey;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/share-serialization\");","import { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport BN from \"bn.js\";\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nexport function mnemonicToKey(shareMnemonic: string): string {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nexport function keyToMnemonic(shareHex: string): string {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","import { Point as TkeyPoint } from \"@tkey-mpc/common-types\";\nimport type { BNString } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport { CURVE } from \"./constants\";\n\ntype EllipticPoint = curve.base.BasePoint;\nconst ZERO_POINT = CURVE.g.mul(new BN(0)) as EllipticPoint;\n\n/**\n * Class `Point` represents an elliptic curve point over curve `CURVE`.\n */\nexport class Point {\n  private p: EllipticPoint;\n\n  /**\n   * Constructs a new Point from an elliptic point.\n   * @param p - The elliptic point to be represented.\n   */\n  constructor(p: EllipticPoint) {\n    this.p = p;\n  }\n\n  /**\n   * Creates a new Point from a private Key.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromPrivateKey(privateKey: BNString): Point {\n    const ep = CURVE.keyFromPrivate(privateKey.toString(\"hex\")).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from a TKey Point.\n   * @param p - The TKey Point.\n   * @returns The Point encoded by `p`.\n   */\n  public static fromTkeyPoint(p: TkeyPoint): Point {\n    const ep = CURVE.keyFromPublic({ x: p.x.toString(\"hex\"), y: p.y.toString(\"hex\") }).getPublic();\n    return new Point(ep);\n  }\n\n  /**\n   * Creates a new Point from an SEC1-encoded byte buffer.\n   * @param buf - The SEC1-encoded point.\n   * @returns The Point encoded by `buf`.\n   */\n  public static fromBufferSEC1(buf: Buffer): Point {\n    // \"elliptic\"@6.5.4 can't decode zero point.\n    if (buf.length === 1 && buf[0] === 0) {\n      return new Point(ZERO_POINT);\n    }\n\n    const p = CURVE.keyFromPublic(buf.toString(\"hex\"), \"hex\").getPublic();\n    return new Point(p);\n  }\n\n  /**\n   * Converts this point to a TKey Point.\n   * @returns A TKey Point representing this point.\n   * @throws If this point cannot be represented by a TKey Point. For example,\n   * if this point encodes the point at infinity.\n   */\n  public toTkeyPoint(): TkeyPoint {\n    if (this.p.isInfinity()) {\n      throw new Error(\"Point at infinity can't be represented as tkey point.\");\n    }\n\n    const x = this.p.getX().toString(\"hex\");\n    const y = this.p.getY().toString(\"hex\");\n    return new TkeyPoint(x, y);\n  }\n\n  /**\n   * Converts this point to a byte buffer in SEC1 format.\n   * @param compressed - Whether to use compressed format.\n   * @returns The SEC1-encoded representation of the point.\n   */\n  public toBufferSEC1(compressed: boolean): Buffer {\n    // \"elliptic\"@6.5.4 can't encode zero point.\n    if (this.p.isInfinity()) {\n      return Buffer.from(\"00\", \"hex\");\n    }\n\n    return Buffer.from(this.p.encode(\"hex\", compressed), \"hex\");\n  }\n\n  /**\n   * Checks for point equality between `this` and `p`.\n   * @param p - The point to compare to.\n   * @returns True if `this == p`. False otherwise.\n   */\n  public equals(p: Point): boolean {\n    return this.p.eq(p.p);\n  }\n}\n","import { getPubKeyPoint, Point as tkeyPoint, StringifiedType } from \"@tkey-mpc/common-types\";\nimport { keccak256 } from \"@toruslabs/torus.js\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, VALID_SHARE_INDICES } from \"../constants\";\nimport type { Web3AuthMPCCoreKit } from \"../mpcCoreKit\";\nimport { Point } from \"../point\";\n\nexport class TssSecurityQuestionStore {\n  shareIndex: string;\n\n  factorPublicKey: string;\n\n  question: string;\n\n  constructor(shareIndex: string, factorPublicKey: string, question: string) {\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n\n  static fromJSON(json: StringifiedType) {\n    const { shareIndex, factorPublicKey, question } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question,\n    };\n  }\n}\n\nexport interface setSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  question: string;\n  answer: string;\n  shareType?: TssShareType;\n  description?: Record<string, string>;\n  tssIndex?: TssShareType;\n}\n\nexport interface changeSecurityQuestionParams {\n  mpcCoreKit: Web3AuthMPCCoreKit;\n  newQuestion: string;\n  newAnswer: string;\n  answer: string;\n}\n\nexport class TssSecurityQuestion {\n  storeDomainName = \"tssSecurityQuestion\";\n\n  async setSecurityQuestion(params: setSecurityQuestionParams): Promise<string> {\n    const { mpcCoreKit, question, answer, description } = params;\n    let { shareType } = params;\n\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n\n    const descriptionFinal = {\n      question,\n      ...description,\n    };\n\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal,\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN);\n    const factorPub = Point.fromTkeyPoint(tkeyPt).toBufferSEC1(true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  async changeSecurityQuestion(params: changeSecurityQuestionParams) {\n    const { mpcCoreKit, newQuestion, newAnswer, answer } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromTkeyPoint(getPubKeyPoint(newAnswerBN));\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex) as TssShareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt.toTkeyPoint(), factorKeyBN);\n\n    store.factorPublicKey = newFactorPt.toBufferSEC1(true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit: Web3AuthMPCCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(tkeyPoint.fromCompressedPub(store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  async recoverFactor(mpcCoreKit: Web3AuthMPCCoreKit, answer: string): Promise<string> {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = Point.fromTkeyPoint(tkey.getKeyDetails().pubKey).toBufferSEC1(true).toString(\"hex\") + tkey.tssTag;\n\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n\n    if (factorKeyPt.toBufferSEC1(true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    return hash;\n  }\n\n  getQuestion(mpcCoreKit: Web3AuthMPCCoreKit): string {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey) as StringifiedType;\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n","import { Point as TkeyPoint, ShareDescriptionMap } from \"@tkey-mpc/common-types\";\nimport ThresholdKey from \"@tkey-mpc/core\";\nimport type {\n  AGGREGATE_VERIFIER_TYPE,\n  ExtraParams,\n  LoginWindowResponse,\n  SubVerifierDetails,\n  TorusVerifierResponse,\n  UX_MODE_TYPE,\n  WebAuthnExtraParams,\n} from \"@toruslabs/customauth\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BN from \"bn.js\";\n\nimport { FactorKeyTypeShareDescription, TssShareType, USER_PATH, WEB3AUTH_NETWORK } from \"./constants\";\n\nexport type CoreKitMode = UX_MODE_TYPE | \"nodejs\" | \"react-native\";\n\nexport interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nexport type SupportedStorageType = \"local\" | \"session\" | \"memory\" | IStorage;\n\nexport interface InitParams {\n  /**\n   * @defaultValue `true`\n   * handle the redirect result during init()\n   */\n  handleRedirectResult: boolean;\n  /**\n   * @defaultValue `true`\n   * rehydrate the session during init()\n   */\n  rehydrate?: boolean;\n}\n\nexport interface BaseLoginParams {\n  // offset in seconds\n  serverTimeOffset?: number;\n}\n\nexport interface SubVerifierDetailsParams extends BaseLoginParams {\n  subVerifierDetails: SubVerifierDetails;\n}\n\nexport interface AggregateVerifierLoginParams extends BaseLoginParams {\n  aggregateVerifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n  aggregateVerifierType?: AGGREGATE_VERIFIER_TYPE;\n}\n\nexport interface IFactorKey {\n  factorKey: BN;\n  shareType: TssShareType;\n}\n\nexport enum COREKIT_STATUS {\n  NOT_INITIALIZED = \"NOT_INITIALIZED\",\n  INITIALIZED = \"INITIALIZED\",\n  REQUIRED_SHARE = \"REQUIRED_SHARE\",\n  LOGGED_IN = \"LOGGED_IN\",\n}\n\nexport type MPCKeyDetails = {\n  metadataPubKey: TkeyPoint;\n  threshold: number;\n  requiredFactors: number;\n  totalFactors: number;\n  shareDescriptions: ShareDescriptionMap;\n  tssPubKey?: TkeyPoint;\n};\n\nexport type OauthLoginParams = SubVerifierDetailsParams | AggregateVerifierLoginParams;\nexport type UserInfo = TorusVerifierResponse & LoginWindowResponse;\n\nexport interface EnableMFAParams {\n  /**\n   * A BN used for encrypting your Device/ Recovery TSS Key Share. You can generate it using `generateFactorKey()` function or use an existing one.\n   */\n  factorKey?: BN;\n  /**\n   * Setting the Description of Share - Security Questions, Device Share, Seed Phrase, Password Share, Social Share, Other. Default is Other.\n   */\n  shareDescription?: FactorKeyTypeShareDescription;\n  /**\n   * Additional metadata information you want to be stored alongside this factor for easy identification.\n   */\n  additionalMetadata?: Record<string, string>;\n}\n\nexport interface CreateFactorParams extends EnableMFAParams {\n  /**\n   * Setting the Type of Share - Device or Recovery.\n   **/\n  shareType: TssShareType;\n}\n\nexport interface IdTokenLoginParams {\n  /**\n   * Name of the verifier created on Web3Auth Dashboard. In case of Aggregate Verifier, the name of the top level aggregate verifier.\n   */\n  verifier: string;\n\n  /**\n   * Unique Identifier for the User. The verifier identifier field set for the verifier/ sub verifier. E.g. \"sub\" field in your on jwt id token.\n   */\n  verifierId: string;\n\n  /**\n   * The idToken received from the Auth Provider.\n   */\n  idToken: string;\n\n  /**\n   * Name of the sub verifier in case of aggregate verifier setup. This field should only be provided in case of an aggregate verifier.\n   */\n  subVerifier?: string;\n\n  /**\n   * Extra verifier params in case of a WebAuthn verifier type.\n   */\n  extraVerifierParams?: WebAuthnExtraParams;\n\n  /**\n   * Any additional parameter (key value pair) you'd like to pass to the login function.\n   */\n  additionalParams?: ExtraParams;\n}\n\nexport interface Web3AuthState {\n  oAuthKey?: string;\n  signatures?: string[];\n  userInfo?: UserInfo;\n  tssShareIndex?: number;\n  tssPubKey?: Buffer;\n  factorKey?: BN;\n}\n\nexport interface ICoreKit {\n  /**\n   * The tKey instance, if initialized.\n   * TKey is the core module on which this wrapper SDK sits for easy integration.\n   **/\n  tKey: ThresholdKey | null;\n\n  /**\n   * Provider for making the blockchain calls.\n   **/\n  provider: SafeEventEmitterProvider | null;\n\n  /**\n   * Signatures generated from the OAuth Login.\n   **/\n  signatures: string[] | null;\n\n  /**\n   * Status of the current MPC Core Kit Instance\n   **/\n  status: COREKIT_STATUS;\n\n  /**\n   * The current sdk state.\n   */\n  state: Web3AuthState;\n\n  /**\n   * The current session id.\n   */\n  sessionId: string;\n\n  /**\n   * The function used to initailise the state of MPCCoreKit\n   * Also is useful to resume an existing session.\n   * @param initParams - Contains flag for handleRedirectResult. Default is true.\n   */\n  init(initParams?: InitParams): Promise<void>;\n\n  /**\n   * Login into the SDK in an implicit flow and initialize all relevant components.\n   * @param loginParams - Parameters for Implicit Login.\n   */\n  loginWithOauth(loginParams: OauthLoginParams): Promise<void>;\n\n  /**\n   * Login into the SDK using ID Token based login and initialize all relevant components.\n   * @param idTokenLoginParams - Parameters with ID Token based Login.\n   */\n  loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void>;\n\n  /**\n   * Enable MFA for the user. Deletes the Cloud factor and generates a new\n   * factor key and a backup factor key. Recommended for Non Custodial Flow.\n   * Stores the factor key in browser storage and returns the backup factor key.\n   *\n   * ** NOTE before enableMFA, you will need to commitChanges if manualSync is true.\n   *\n   * @param enableMFAParams - Parameters for recovery factor for MFA.\n   * @param recoveryFactor - Default is true. If false, recovery factor will NOT be created.\n   * @returns The backup factor key if if recoveryFacort is true else empty string.\n   */\n  enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor?: boolean): Promise<string>;\n\n  /**\n   * Second step for login where the user inputs their factor key.\n   * @param factorKey - A BN used for encrypting your Device/ Recovery TSS Key\n   * Share. You can generate it using `generateFactorKey()` function or use an\n   * existing one.\n   */\n  inputFactorKey(factorKey: BN): Promise<void>;\n\n  /**\n   * Returns the current Factor Key and TssShareType in MPC Core Kit State\n   **/\n  getCurrentFactorKey(): IFactorKey;\n\n  /**\n   * Creates a new factor for authentication. Generates and returns a new factor\n   * key if no factor key is provided in `params`.\n   * @param createFactorParams - Parameters for creating a new factor.\n   * @returns The factor key.\n   */\n  createFactor(createFactorParams: CreateFactorParams): Promise<string>;\n\n  /**\n   * Deletes the factor identified by the given public key, including all\n   * associated metadata.\n   * @param factorPub - The public key of the factor to delete.\n   */\n  deleteFactor(factorPub: TkeyPoint): Promise<void>;\n\n  /**\n   * Logs out the user, terminating the session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Get user information provided by the OAuth provider.\n   */\n  getUserInfo(): UserInfo;\n\n  /**\n   * Get information about how the keys of the user is managed according to the information in the metadata server.\n   */\n  getKeyDetails(): MPCKeyDetails;\n\n  /**\n   * Commit the changes made to the user's account when in manual sync mode.\n   */\n  commitChanges(): Promise<void>;\n\n  /**\n   * Export the user's current TSS MPC account as a private key\n   */\n  _UNSAFE_exportTssKey(): Promise<string>;\n}\n\nexport type WEB3AUTH_NETWORK_TYPE = (typeof WEB3AUTH_NETWORK)[keyof typeof WEB3AUTH_NETWORK];\n\nexport type USER_PATH_TYPE = (typeof USER_PATH)[keyof typeof USER_PATH];\n\nexport interface Web3AuthOptions {\n  /**\n   * The Web3Auth Client ID for your application. Find one at https://dashboard.web3auth.io\n   */\n  web3AuthClientId: string;\n\n  /**\n   * Chain Config for the chain you want to connect to. Currently supports only EVM based chains.\n   */\n  chainConfig?: CustomChainConfig;\n\n  /**\n   * @defaultValue `false`\n   */\n  manualSync?: boolean;\n\n  /**\n   * @defaultValue `${window.location.origin}/serviceworker`\n   */\n  baseUrl?: string;\n\n  /**\n   *\n   * @defaultValue `'sapphire_mainnet'`\n   */\n  web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE;\n\n  /**\n   *\n   * @defaultValue `'local'`\n   */\n  storageKey?: SupportedStorageType;\n\n  /**\n   * @defaultValue 86400\n   */\n  sessionTime?: number;\n\n  /**\n   * @defaultValue `'POPUP'`\n   */\n  uxMode?: CoreKitMode;\n\n  /**\n   * @defaultValue `false`\n   * enables logging of the internal packages.\n   */\n  enableLogging?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue `\"redirect\"`\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * @defaultValue `false`\n   * Disables the cloud factor key, enabling the one key semi custodial flow.\n   * Recommended for Non Custodial Flow.\n   */\n  disableHashedFactorKey?: boolean;\n\n  /**\n   * @defaultValue `null`\n   * Overwrite tss-lib for nodejs.\n   * Required for nodejs mode.\n   * Do not use this option for non nodejs mode.\n   */\n  tssLib?: unknown;\n\n  /**\n   * @defaultValue `Web3AuthOptions.web3AuthClientId`\n   * Overwrites the default value ( clientId ) used as nonce for hashing the hash factor key.\n   *\n   * If you want to aggregate the mfa status of client id 1 and client id 2  apps\n   * set hashedFactorNonce to some common clientID, which can be either client id 1 or client id 2 or any other unique string\n   * #PR 72\n   * Do not use this unless you know what you are doing.\n   */\n  hashedFactorNonce?: string;\n}\n\nexport type Web3AuthOptionsWithDefaults = Required<Web3AuthOptions>;\n\nexport interface SessionData {\n  oAuthKey: string;\n  factorKey: string;\n  tssShareIndex: number;\n  tssPubKey: string;\n  signatures: string[];\n  userInfo: UserInfo;\n}\n\nexport interface TkeyLocalStoreData {\n  factorKey: string;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/service-provider-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey-mpc/storage-layer-torus\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/customauth\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-session-manager\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tss-client\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth-mpc/ethereum-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","/* eslint-disable @typescript-eslint/member-ordering */\nimport { BNString, encrypt, getPubKeyPoint, Point as TkeyPoint, SHARE_DELETED, ShareStore, StringifiedType } from \"@tkey-mpc/common-types\";\nimport ThresholdKey, { CoreError } from \"@tkey-mpc/core\";\nimport { TorusServiceProvider } from \"@tkey-mpc/service-provider-torus\";\nimport { ShareSerializationModule } from \"@tkey-mpc/share-serialization\";\nimport { TorusStorageLayer } from \"@tkey-mpc/storage-layer-torus\";\nimport { AGGREGATE_VERIFIER, TORUS_METHOD, TorusAggregateLoginResponse, TorusLoginResponse, UX_MODE } from \"@toruslabs/customauth\";\nimport type { UX_MODE_TYPE } from \"@toruslabs/customauth/dist/types/utils/enums\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport TorusUtils, { TorusKey } from \"@toruslabs/torus.js\";\nimport { Client, getDKLSCoeff, setupSockets } from \"@toruslabs/tss-client\";\nimport type * as TssLib from \"@toruslabs/tss-lib\";\nimport { CHAIN_NAMESPACES, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { EthereumSigningProvider } from \"@web3auth-mpc/ethereum-provider\";\nimport BN from \"bn.js\";\nimport bowser from \"bowser\";\n\nimport {\n  CURVE,\n  DEFAULT_CHAIN_CONFIG,\n  DELIMITERS,\n  ERRORS,\n  FactorKeyTypeShareDescription,\n  FIELD_ELEMENT_HEX_LEN,\n  MAX_FACTORS,\n  SOCIAL_TKEY_INDEX,\n  TssShareType,\n  VALID_SHARE_INDICES,\n  WEB3AUTH_NETWORK,\n} from \"./constants\";\nimport { BrowserStorage, storeWebBrowserFactor } from \"./helper/browserStorage\";\nimport {\n  AggregateVerifierLoginParams,\n  COREKIT_STATUS,\n  CoreKitMode,\n  CreateFactorParams,\n  EnableMFAParams,\n  ICoreKit,\n  IdTokenLoginParams,\n  IFactorKey,\n  InitParams,\n  MPCKeyDetails,\n  OauthLoginParams,\n  SessionData,\n  SubVerifierDetailsParams,\n  UserInfo,\n  Web3AuthOptions,\n  Web3AuthOptionsWithDefaults,\n  Web3AuthState,\n} from \"./interfaces\";\nimport { Point } from \"./point\";\nimport {\n  addFactorAndRefresh,\n  deleteFactorAndRefresh,\n  generateFactorKey,\n  generateTSSEndpoints,\n  getHashedPrivateKey,\n  parseToken,\n  scalarBNToBufferSEC1,\n} from \"./utils\";\n\nexport class Web3AuthMPCCoreKit implements ICoreKit {\n  public state: Web3AuthState = {};\n\n  private options: Web3AuthOptionsWithDefaults;\n\n  private privKeyProvider: EthereumSigningProvider | null = null;\n\n  private torusSp: TorusServiceProvider | null = null;\n\n  private storageLayer: TorusStorageLayer | null = null;\n\n  private tkey: ThresholdKey | null = null;\n\n  private sessionManager!: OpenloginSessionManager<SessionData>;\n\n  private currentStorage!: BrowserStorage;\n\n  private nodeDetailManager!: NodeDetailManager;\n\n  private _storageBaseKey = \"corekit_store\";\n\n  private enableLogging = false;\n\n  private ready = false;\n\n  constructor(options: Web3AuthOptions) {\n    if (!options.chainConfig) options.chainConfig = DEFAULT_CHAIN_CONFIG;\n    if (options.chainConfig.chainNamespace !== CHAIN_NAMESPACES.EIP155) {\n      throw new Error(\"You must specify a eip155 chain config.\");\n    }\n    if (!options.web3AuthClientId) {\n      throw new Error(\"You must specify a web3auth clientId.\");\n    }\n\n    const isNodejsOrRN = this.isNodejsOrRN(options.uxMode);\n\n    if (isNodejsOrRN && [\"local\", \"session\"].includes(options.storageKey.toString())) {\n      throw new Error(`${options.uxMode} mode do not storage of type : ${options.storageKey}`);\n    }\n\n    if (isNodejsOrRN && !options.tssLib) {\n      throw new Error(`${options.uxMode} mode requires tssLib`);\n    }\n\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = isNodejsOrRN ? \"https://localhost\" : `${window?.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.hashedFactorNonce) options.hashedFactorNonce = options.web3AuthClientId;\n\n    this.options = options as Web3AuthOptionsWithDefaults;\n\n    this.currentStorage = BrowserStorage.getInstance(this._storageBaseKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    this.nodeDetailManager = new NodeDetailManager({\n      network: this.options.web3AuthNetwork,\n      enableLogging: options.enableLogging,\n    });\n  }\n\n  get tKey(): ThresholdKey {\n    if (this.tkey === null) throw new Error(\"Tkey not initialized\");\n    return this.tkey;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider ? this.privKeyProvider.provider : null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get signatures(): string[] {\n    return this.state?.signatures ? this.state.signatures : [];\n  }\n\n  set signatures(_: string[] | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  // this return oauthkey which is used by demo to reset account.\n  // this is not the same metadataKey from tkey.\n  // will be fixed in next major release\n  get metadataKey(): string | null {\n    return this.state?.oAuthKey ? this.state.oAuthKey : null;\n  }\n\n  set metadataKey(_: string | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  get status(): COREKIT_STATUS {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const { tkey } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.privKey || !this.state.factorKey) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n\n  get sessionId(): string {\n    return this.sessionManager.sessionId;\n  }\n\n  private get verifier(): string {\n    if (this.state.userInfo?.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return this.state?.userInfo?.verifier ? this.state.userInfo.verifier : \"\";\n  }\n\n  private get verifierId(): string {\n    return this.state?.userInfo?.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n\n  private get isRedirectMode(): boolean {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n\n  public async init(params: InitParams = { handleRedirectResult: true }): Promise<void> {\n    this.resetState();\n    if (params.rehydrate === undefined) params.rehydrate = true;\n\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test@example.com\" });\n\n    if (!nodeDetails) {\n      throw new Error(\"error getting node details, please try again!\");\n    }\n\n    this.torusSp = new TorusServiceProvider({\n      useTSS: true,\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl,\n        uxMode: this.isNodejsOrRN(this.options.uxMode) ? UX_MODE.REDIRECT : (this.options.uxMode as UX_MODE_TYPE),\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n      },\n      nodeEndpoints: nodeDetails.torusNodeEndpoints,\n      nodePubKeys: nodeDetails.torusNodePub.map((i) => ({ x: i.X, y: i.Y })),\n    });\n\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging,\n    });\n\n    const shareSerializationModule = new ShareSerializationModule();\n\n    this.tkey = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule,\n      },\n    });\n\n    if (this.isRedirectMode) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({ skipSw: true, skipPrefetch: true });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await (this.tKey.serviceProvider as TorusServiceProvider).init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (\n      params.handleRedirectResult &&\n      this.options.uxMode === UX_MODE.REDIRECT &&\n      (window?.location.hash.includes(\"#state\") || window?.location.hash.includes(\"#access_token\"))\n    ) {\n      await this.handleRedirectResult();\n\n      // if not redirect flow try to rehydrate session if available\n    } else if (params.rehydrate && this.sessionManager.sessionId) {\n      await this.rehydrateSession();\n      if (this.state.factorKey) await this.setupProvider();\n    }\n    // if not redirect flow or session rehydration, ask for factor key to login\n  }\n\n  public async loginWithOauth(params: OauthLoginParams): Promise<void> {\n    this.checkReady();\n    if (this.isNodejsOrRN(this.options.uxMode)) throw new Error(`Oauth login is NOT supported in ${this.options.uxMode}`);\n\n    const tkeyServiceProvider = this.tKey.serviceProvider as TorusServiceProvider;\n    try {\n      // oAuth login.\n      const verifierParams = params as SubVerifierDetailsParams;\n      const aggregateParams = params as AggregateVerifierLoginParams;\n      if (verifierParams.subVerifierDetails) {\n        // single verifier login.\n        const loginResponse = await tkeyServiceProvider.triggerLogin((params as SubVerifierDetailsParams).subVerifierDetails);\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        const loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier as string,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray,\n        });\n\n        if (this.isRedirectMode) return;\n\n        this.updateState({\n          oAuthKey: this._getOAuthKey(loginResponse),\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n        });\n      }\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async loginWithJWT(idTokenLoginParams: IdTokenLoginParams): Promise<void> {\n    this.checkReady();\n\n    const { verifier, verifierId, idToken } = idTokenLoginParams;\n    try {\n      // oAuth login.\n      let loginResponse: TorusKey;\n      if (!idTokenLoginParams.subVerifier) {\n        // single verifier login.\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getTorusKey(\n          verifier,\n          verifierId,\n          { verifier_id: verifierId },\n          idToken,\n          {\n            ...idTokenLoginParams.extraVerifierParams,\n            ...idTokenLoginParams.additionalParams,\n          }\n        );\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"normal\";\n      } else {\n        // aggregate verifier login\n        loginResponse = await (this.tKey.serviceProvider as TorusServiceProvider).customAuthInstance.getAggregateTorusKey(verifier, verifierId, [\n          { verifier: idTokenLoginParams.subVerifier, idToken, extraVerifierParams: idTokenLoginParams.extraVerifierParams },\n        ]);\n        (this.tKey.serviceProvider as TorusServiceProvider).verifierType = \"aggregate\";\n      }\n\n      const oAuthShare = this._getOAuthKey(loginResponse);\n\n      (this.tKey.serviceProvider as TorusServiceProvider).postboxKey = new BN(oAuthShare, \"hex\");\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierName = verifier;\n      (this.tKey.serviceProvider as TorusServiceProvider).verifierId = verifierId;\n\n      this.updateState({\n        oAuthKey: oAuthShare,\n        userInfo: { ...parseToken(idToken), verifier, verifierId },\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData),\n      });\n\n      await this.setupTkey();\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public async handleRedirectResult(): Promise<void> {\n    this.checkReady();\n\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const data = result.result as TorusLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo,\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"normal\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const data = result.result as TorusAggregateLoginResponse;\n        if (!data) throw new Error(\"Invalid login params passed\");\n        this.updateState({\n          oAuthKey: this._getOAuthKey(data),\n          userInfo: data.userInfo[0],\n          signatures: this._getSignatures(data.sessionData.sessionTokenData),\n        });\n        this.torusSp.verifierType = \"aggregate\";\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw new Error(\"Unsupported method type\");\n      }\n\n      const userInfo = this.getUserInfo();\n      if (!this.state.oAuthKey) throw new Error(\"oAuthKey not present\");\n      this.torusSp.postboxKey = new BN(this.state.oAuthKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error: unknown) {\n      log.error(\"error while handling redirect result\", error);\n      throw new Error((error as Error).message);\n    }\n  }\n\n  public async inputFactorKey(factorKey: BN): Promise<void> {\n    this.checkReady();\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.privKey) {\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err: unknown) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) throw new Error(ERRORS.TKEY_SHARES_REQUIRED);\n      }\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getCurrentFactorKey(): IFactorKey {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.tssShareIndex) throw new Error(\"TSS Share Type (Index) not present\");\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex,\n      };\n    } catch (err: unknown) {\n      log.error(\"state error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssPublicKey(): TkeyPoint {\n    this.checkReady();\n    return this.tKey.getTSSPub();\n  }\n\n  public async enableMFA(enableMFAParams: EnableMFAParams, recoveryFactor = true): Promise<string> {\n    this.checkReady();\n\n    const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) throw new Error(\"CommitChanges are required before enabling MFA\");\n      throw new Error(\"MFA already enabled\");\n    }\n\n    try {\n      let browserData;\n\n      if (this.isNodejsOrRN(this.options.uxMode)) {\n        browserData = {\n          browserName: \"Node Env\",\n          browserVersion: \"\",\n          deviceName: \"nodejs\",\n        };\n      } else {\n        // try {\n        const browserInfo = bowser.parse(navigator.userAgent);\n        const browserName = `${browserInfo.browser.name}`;\n        browserData = {\n          browserName,\n          browserVersion: browserInfo.browser.version,\n          deviceName: browserInfo.os.name,\n        };\n      }\n      const deviceFactorKey = new BN(await this.createFactor({ shareType: TssShareType.DEVICE, additionalMetadata: browserData }), \"hex\");\n      storeWebBrowserFactor(deviceFactorKey, this);\n      await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n\n      const hashedFactorPub = getPubKeyPoint(hashedFactorKey);\n      await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n      await this.deleteMetadataShareBackup(hashedFactorKey);\n\n      // only recovery factor = true\n      if (recoveryFactor) {\n        const backupFactorKey = await this.createFactor({ shareType: TssShareType.RECOVERY, ...enableMFAParams });\n        return backupFactorKey;\n      }\n      // update to undefined for next major release\n      return \"\";\n    } catch (err: unknown) {\n      log.error(\"error enabling MFA\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  public getTssFactorPub = (): string[] => {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n    return factorPubsList.map((factorPub) => Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"));\n  };\n\n  public async createFactor(createFactorParams: CreateFactorParams): Promise<string> {\n    this.checkReady();\n\n    let { shareType, factorKey, shareDescription, additionalMetadata } = createFactorParams;\n\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n\n    const factorPub = getPubKeyPoint(factorKey);\n\n    if (this.getTssFactorPub().includes(Point.fromTkeyPoint(factorPub).toBufferSEC1(true).toString(\"hex\"))) {\n      throw new Error(\"Factor already exists\");\n    }\n\n    try {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription(factorKey, shareDescription, additionalMetadata);\n      if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    } catch (error) {\n      log.error(\"error creating factor\", error);\n      throw error;\n    }\n  }\n\n  // function for setting up provider\n  public getPublic: () => Promise<Buffer> = async () => {\n    let { tssPubKey } = this.state;\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n    return tssPubKey;\n  };\n\n  public sign = async (msgHash: Buffer): Promise<{ v: number; r: Buffer; s: Buffer }> => {\n    // if (this.state.remoteClient) {\n    //   return this.remoteSign(msgHash);\n    // }\n    return this.localSign(msgHash);\n  };\n\n  public localSign = async (msgHash: Buffer) => {\n    // PreSetup\n    let { tssShareIndex, tssPubKey } = this.state;\n    const { torusNodeTSSEndpoints } = await this.nodeDetailManager.getNodeDetails({\n      verifier: \"test-verifier\",\n      verifierId: \"test@example.com\",\n    });\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const tssNonce = this.getTssNonce();\n\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw new Error(\"tssPubKey or torusNodeTSSEndpoints not available\");\n    }\n\n    if (tssPubKey.length === FIELD_ELEMENT_HEX_LEN + 1) {\n      tssPubKey = tssPubKey.subarray(1);\n    }\n\n    const vid = `${this.verifier}${DELIMITERS.Delimiter1}${this.verifierId}`;\n    const sessionId = `${vid}${DELIMITERS.Delimiter2}default${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}`;\n\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const { nodeIndexes } = await (this.tKey.serviceProvider as TorusServiceProvider).getTSSPubKey(\n      this.tKey.tssTag,\n      this.tKey.metadata.tssNonces[this.tKey.tssTag]\n    );\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes,\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n    const randomSessionNonce = keccak256(Buffer.from(generatePrivate().toString(\"hex\") + Date.now(), \"utf8\")).toString(\"hex\");\n    const tssImportUrl = `${torusNodeTSSEndpoints[0]}/v1/clientWasm`;\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const currentSession = `${sessionId}${randomSessionNonce}`;\n\n    let tss: typeof TssLib;\n    if (this.isNodejsOrRN(this.options.uxMode)) {\n      tss = this.options.tssLib as typeof TssLib;\n    } else {\n      tss = await import(\"@toruslabs/tss-lib\");\n      await tss.default(tssImportUrl);\n    }\n    // setup mock shares, sockets and tss wasm files.\n    const [sockets] = await Promise.all([setupSockets(tssWSEndpoints, randomSessionNonce)]);\n\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex as number);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(CURVE.curve.n);\n    const share = scalarBNToBufferSEC1(denormalisedShare).toString(\"base64\");\n\n    if (!currentSession) {\n      throw new Error(`sessionAuth does not exist ${currentSession}`);\n    }\n\n    const signatures = await this.getSigningSignatures(msgHash.toString(\"hex\"));\n    if (!signatures) {\n      throw new Error(`Signature does not exist ${signatures}`);\n    }\n\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKey.toString(\"base64\"), true, tssImportUrl);\n    const serverCoeffs: Record<number, string> = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex as number, serverIndex).toString(\"hex\");\n    }\n\n    client.precompute(tss, { signatures, server_coeffs: serverCoeffs });\n\n    await client.ready().catch((err) => {\n      client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n      throw err;\n    });\n\n    let { r, s, recoveryParam } = await client.sign(tss, Buffer.from(msgHash).toString(\"base64\"), true, \"\", \"keccak256\", {\n      signatures,\n    });\n\n    if (recoveryParam < 27) {\n      recoveryParam += 27;\n    }\n    // skip await cleanup\n    client.cleanup(tss, { signatures, server_coeffs: serverCoeffs });\n    return { v: recoveryParam, r: scalarBNToBufferSEC1(r), s: scalarBNToBufferSEC1(s) };\n  };\n\n  async deleteFactor(factorPub: TkeyPoint, factorKey?: BNString): Promise<void> {\n    if (!this.state.factorKey) throw new Error(\"Factor key not present\");\n    if (!this.tKey.metadata.factorPubs) throw new Error(\"Factor pubs not present\");\n    const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n    if (remainingFactors <= 1) throw new Error(\"Cannot delete last factor\");\n    const fpp = Point.fromTkeyPoint(factorPub);\n    const stateFpp = Point.fromTkeyPoint(getPubKeyPoint(this.state.factorKey));\n    if (fpp.equals(stateFpp)) {\n      throw new Error(\"Cannot delete current active factor\");\n    }\n\n    await deleteFactorAndRefresh(this.tKey, factorPub, this.state.factorKey, this.signatures);\n    const factorPubHex = fpp.toBufferSEC1(true).toString(\"hex\");\n    const allDesc = this.tKey.metadata.getShareDescription();\n    const keyDesc = allDesc[factorPubHex];\n    if (keyDesc) {\n      keyDesc.forEach(async (desc) => {\n        await this.tKey?.deleteShareDescription(factorPubHex, desc);\n      });\n    }\n\n    // delete factorKey share metadata if factorkey is provided\n    if (factorKey) {\n      const factorKeyBN = new BN(factorKey, \"hex\");\n      const derivedFactorPub = Point.fromTkeyPoint(getPubKeyPoint(factorKeyBN));\n      // only delete if factorPub matches\n      if (derivedFactorPub.equals(fpp)) {\n        await this.deleteMetadataShareBackup(factorKeyBN);\n      }\n    }\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  public async logout(): Promise<void> {\n    if (this.sessionManager.sessionId) {\n      // throw new Error(\"User is not logged in.\");\n      await this.sessionManager.invalidateSession();\n    }\n    this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({ handleRedirectResult: false });\n  }\n\n  public getUserInfo(): UserInfo {\n    if (!this.state.userInfo) {\n      throw new Error(\"user is not logged in.\");\n    }\n    return this.state.userInfo;\n  }\n\n  public getKeyDetails(): MPCKeyDetails {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? this.tKey.getTSSPub() : undefined;\n\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails: MPCKeyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n    };\n    return keyDetails;\n  }\n\n  public async commitChanges(): Promise<void> {\n    this.checkReady();\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error: unknown) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n\n  public async setManualSync(manualSync: boolean): Promise<void> {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  private async importTssKey(tssKey: string, factorPub: TkeyPoint, newTSSIndex: TssShareType = TssShareType.DEVICE): Promise<void> {\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const tssKeyBN = new BN(tssKey, \"hex\");\n    this.tKey.importTssKey({ tag: this.tKey.tssTag, importKey: tssKeyBN, factorPub, newTSSIndex }, { authSignatures: this.state.signatures });\n  }\n\n  public async _UNSAFE_exportTssKey(): Promise<string> {\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    if (!this.state.signatures) throw new Error(\"signatures not present\");\n\n    const exportTssKey = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures,\n      selectedServers: [],\n    });\n\n    return exportTssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  private getTssNonce(): number {\n    if (!this.tKey.metadata.tssNonces) throw new Error(\"tssNonce not present\");\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n\n  private async setupTkey(): Promise<void> {\n    if (!this.state.oAuthKey) {\n      throw new Error(\"user not logged in\");\n    }\n    const existingUser = await this.isMetadataPresent(this.state.oAuthKey);\n\n    if (!existingUser) {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey: BN;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      }\n      const deviceTSSShare = new BN(generatePrivate());\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey);\n      await this.tKey.initialize({ useTSS: true, factorPub, deviceTSSShare, deviceTSSIndex });\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.Other);\n      } else {\n        await this.addFactorDescription(factorKey, FactorKeyTypeShareDescription.HashedShare);\n      }\n    } else {\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      const hashedFactorKey = getHashedPrivateKey(this.state.oAuthKey, this.options.hashedFactorNonce);\n      if ((await this.checkIfFactorKeyValid(hashedFactorKey)) && !this.options.disableHashedFactorKey) {\n        // Initialize tkey with existing hashed share if available.\n        const factorKeyMetadata: ShareStore = await this.getFactorKeyMetadata(hashedFactorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      }\n    }\n  }\n\n  private async finalizeTkey(factorKey: BN) {\n    // Read tss meta data.\n    const { tssIndex: tssShareIndex } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = Point.fromTkeyPoint(this.tKey.getTSSPub()).toBufferSEC1(false);\n\n    this.updateState({ tssShareIndex, tssPubKey, factorKey });\n\n    // Finalize setup.\n    if (!this.tKey.manualSync) await this.tKey.syncLocalMetadataTransitions();\n    await this.setupProvider();\n    await this.createSession();\n  }\n\n  private checkReady() {\n    if (!this.ready) {\n      throw Error(\"MPC Core Kit not initialized, call init first!\");\n    }\n  }\n\n  private async rehydrateSession() {\n    try {\n      this.checkReady();\n\n      if (!this.sessionManager.sessionId) return {};\n      const result = await this.sessionManager.authorizeSession();\n      const factorKey = new BN(result.factorKey, \"hex\");\n      if (!factorKey) {\n        throw new Error(\"Invalid factor key\");\n      }\n      this.torusSp.postboxKey = new BN(result.oAuthKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      this.torusSp.verifierType = result.userInfo.aggregateVerifier ? \"aggregate\" : \"normal\";\n      const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n      await this.tKey.initialize({ neverInitializeNewKey: true });\n      await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      await this.tKey.reconstructKey();\n\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        oAuthKey: result.oAuthKey,\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: Buffer.from(result.tssPubKey.padStart(FIELD_ELEMENT_HEX_LEN, \"0\"), \"hex\"),\n        signatures: result.signatures,\n        userInfo: result.userInfo,\n      });\n    } catch (err) {\n      log.error(\"error trying to authorize session\", err);\n    }\n  }\n\n  private async createSession() {\n    try {\n      const sessionId = OpenloginSessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const { oAuthKey, factorKey, userInfo, tssShareIndex, tssPubKey } = this.state;\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n      const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n      if (!oAuthKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n        throw new Error(\"User not logged in\");\n      }\n      const payload: SessionData = {\n        oAuthKey,\n        factorKey: factorKey?.toString(\"hex\"),\n        tssShareIndex: tssShareIndex as number,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo,\n      };\n      await this.sessionManager.createSession(payload);\n      this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n\n  private async isMetadataPresent(privateKey: string) {\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await this.tKey?.storageLayer.getMetadata<{ message: string }>({ privKey: privateKeyBN });\n    if (metadata && Object.keys(metadata).length > 0 && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n\n  private async checkIfFactorKeyValid(factorKey: BN): Promise<boolean> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    log.info(\"factorKeyMetadata\", factorKeyMetadata);\n    return true;\n  }\n\n  private async getFactorKeyMetadata(factorKey: BN): Promise<ShareStore> {\n    this.checkReady();\n    const factorKeyMetadata = await this.tKey?.storageLayer.getMetadata<StringifiedType>({ privKey: factorKey });\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw new Error(\"no metadata for your factor key, reset your account\");\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  private async copyOrCreateShare(newFactorTSSIndex: number, newFactorPub: TkeyPoint) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw new Error(\"factorPubs does not exist, failed in copy factor pub\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw new Error(\"factorEncs does not exist, failed in copy factor pub\");\n    }\n    if (!this.state.factorKey) {\n      throw new Error(\"factorKey not present\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw new Error(`invalid new share index: must be one of ${VALID_SHARE_INDICES}`);\n    }\n\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw new Error(\"Maximum number of factors reached\");\n    }\n    if (this.state.tssShareIndex !== newFactorTSSIndex) {\n      if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n\n      // Generate new share.\n      await addFactorAndRefresh(this.tKey, newFactorPub, newFactorTSSIndex, this.state.factorKey, this.signatures);\n\n      // Update local share.\n      const { tssIndex } = await this.tKey.getTSSShare(this.state.factorKey);\n      this.updateState({\n        tssShareIndex: tssIndex,\n      });\n      return;\n    }\n\n    if (!this.state.factorKey) throw new Error(\"factorKey not present\");\n    const { tssShare } = await this.tKey.getTSSShare(this.state.factorKey);\n    const updatedFactorPubs = this.tKey.metadata.factorPubs[this.tKey.tssTag].concat([newFactorPub]);\n    const factorEncs = JSON.parse(JSON.stringify(this.tKey.metadata.factorEncs[this.tKey.tssTag]));\n    const factorPubID = newFactorPub.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    factorEncs[factorPubID] = {\n      tssIndex: this.state.tssShareIndex,\n      type: \"direct\",\n      userEnc: await encrypt(Point.fromTkeyPoint(newFactorPub).toBufferSEC1(false), scalarBNToBufferSEC1(tssShare)),\n      serverEncs: [],\n    };\n    this.tKey.metadata.addTSSData({\n      tssTag: this.tKey.tssTag,\n      factorPubs: updatedFactorPubs,\n      factorEncs,\n    });\n\n    if (!this.tKey.manualSync) await this.tKey._syncShareMetadata();\n  }\n\n  private async getMetadataShare(): Promise<ShareStore> {\n    try {\n      const polyId = this.tKey?.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = this.tKey?.shares[polyId];\n      let share: ShareStore | null = null;\n\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) throw new Error(\"no metadata share found\");\n      return share;\n    } catch (err: unknown) {\n      log.error(\"create device share error\", err);\n      throw new Error((err as Error).message);\n    }\n  }\n\n  private async deleteMetadataShareBackup(factorKey: BN): Promise<void> {\n    await this.tKey.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [factorKey] });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async backupMetadataShare(factorKey: BN) {\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await this.tKey?.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey],\n    });\n    if (!this.tkey?.manualSync) await this.tkey?.syncLocalMetadataTransitions();\n  }\n\n  private async addFactorDescription(\n    factorKey: BN,\n    shareDescription: FactorKeyTypeShareDescription,\n    additionalMetadata: Record<string, string> = {},\n    updateMetadata = true\n  ) {\n    const { tssIndex } = await this.tKey.getTSSShare(factorKey);\n    const tkeyPoint = getPubKeyPoint(factorKey);\n    const factorPub = Point.fromTkeyPoint(tkeyPoint).toBufferSEC1(true).toString(\"hex\");\n    const params = {\n      module: shareDescription,\n      dateAdded: Date.now(),\n      ...additionalMetadata,\n      tssShareIndex: tssIndex,\n    };\n    await this.tKey?.addShareDescription(factorPub, JSON.stringify(params), updateMetadata);\n  }\n\n  private async setupProvider(): Promise<void> {\n    const signingProvider = new EthereumSigningProvider({ config: { chainConfig: this.options.chainConfig } });\n    await signingProvider.setupProvider({ sign: this.sign, getPublic: this.getPublic });\n    this.privKeyProvider = signingProvider;\n  }\n\n  private updateState(newState: Partial<Web3AuthState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  private resetState(): void {\n    this.tkey = null;\n    this.privKeyProvider = null;\n  }\n\n  private _getOAuthKey(result: TorusKey): string {\n    return TorusUtils.getPostboxKey(result);\n  }\n\n  private _getSignatures(sessionData: TorusKey[\"sessionData\"][\"sessionTokenData\"]): string[] {\n    return sessionData.map((session) => JSON.stringify({ data: session.token, sig: session.signature }));\n  }\n\n  private async getSigningSignatures(data: string): Promise<string[]> {\n    if (!this.signatures) throw new Error(\"signatures not present\");\n    log.info(\"data\", data);\n    return this.signatures;\n  }\n\n  private isNodejsOrRN(params: CoreKitMode): boolean {\n    const mode = params;\n    return mode === \"nodejs\" || mode === \"react-native\";\n  }\n}\n"],"names":["leafPrototypes","getProto","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","Object","getPrototypeOf","obj","t","value","mode","this","then","ns","create","r","def","current","indexOf","getOwnPropertyNames","forEach","key","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","DEFAULT_CHAIN_CONFIG","chainNamespace","CHAIN_NAMESPACES","EIP155","chainId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","WEB3AUTH_NETWORK","MAINNET","TORUS_SAPPHIRE_NETWORK","SAPPHIRE_MAINNET","DEVNET","SAPPHIRE_DEVNET","USER_PATH","NEW","EXISTING","REHYDRATE","RECOVER","FactorKeyTypeShareDescription","DELIMITERS","Delimiter1","Delimiter2","Delimiter3","Delimiter4","ERRORS","TKEY_SHARES_REQUIRED","INVALID_BACKUP_SHARE","SOCIAL_FACTOR_INDEX","TssShareType","VALID_SHARE_INDICES","DEVICE","RECOVERY","SCALAR_LEN","FIELD_ELEMENT_HEX_LEN","CURVE","EllipticCurve","MAX_FACTORS","SOCIAL_TKEY_INDEX","generateFactorKey","factorKey","BN","generatePrivate","private","pub","getPubKeyPoint","generateTSSEndpoints","tssNodeEndpoints","parties","clientIndex","nodeIndexes","endpoints","tssWSEndpoints","partyIndexes","nodeIndexesReturned","i","push","targetNodeIndex","URL","origin","storageAvailable","type","storage","window","localStorage","sessionStorage","x","setItem","removeItem","error","parseToken","token","base64","split","replace","JSON","parse","atob","async","refreshTssShares","tKey","factorPubs","tssIndices","factorKeyForExistingTSSShare","signatures","updateMetadata","arguments","length","tssShare","tssIndex","getTSSShare","rssNodeDetails","_getRssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","randomSelectedServers","randomSelection","Array","fill","map","_","Math","ceil","verifierNameVerifierId","serviceProvider","getVerifierNameVerifierId","_refreshTSSShares","selectedServers","authSignatures","addFactorAndRefresh","newFactorPub","newFactorTSSIndex","Error","VALID_TSS_INDICES","metadata","isArray","tssTag","existingFactorPubs","updatedFactorPubs","concat","updatedTSSIndexes","fb","getFactorEncs","deleteFactorAndRefresh","factorPubToDelete","factorIndex","findIndex","p","eq","slice","splice","getHashedPrivateKey","postboxKey","clientId","uid","hashUid","keccak256","Buffer","from","scalarBNToBufferSEC1","s","toArrayLike","MemoryStorage","constructor","_defineProperty","getItem","_store","clear","BrowserStorage","storeKey","_storeKey","resetStore","static","storageKey","instance","toJSON","result","currStore","getStore","stringify","set","store","remove","storeWebBrowserFactor","mpcCoreKit","getMetadata","currentStorage","getInstance","tkeyPubX","pubKey","toString","padStart","getWebBrowserFactor","tKeyLocalStoreString","mnemonicToKey","shareMnemonic","ShareSerializationModule","deserializeMnemonic","keyToMnemonic","shareHex","shareBN","serializeMnemonic","ZERO_POINT","g","mul","Point","privateKey","ep","keyFromPrivate","getPublic","keyFromPublic","y","buf","toTkeyPoint","isInfinity","getX","getY","TkeyPoint","toBufferSEC1","compressed","encode","equals","TssSecurityQuestionStore","shareIndex","factorPublicKey","question","json","TssSecurityQuestion","params","answer","description","shareType","domainKey","storeDomainName","includes","tkey","storeDomain","getGeneralStoreDomain","fromTkeyPoint","getKeyDetails","hash","startsWith","factorKeyBN","descriptionFinal","_objectSpread","createFactor","shareDescription","SecurityQuestions","additionalMetadata","tkeyPt","factorPub","storeData","setGeneralStoreDomain","manualSync","_syncShareMetadata","newQuestion","newAnswer","fromJSON","preHash","factorKeyPt","prenewHash","newHash","newAnswerBN","newFactorPt","parseInt","state","inputFactorKey","deleteFactor","deleteFactorKey","tkeyPoint","fromCompressedPub","deleteGeneralStoreDomain","getQuestion","COREKIT_STATUS","Web3AuthMPCCoreKit","options","_window","checkReady","tssPubKey","subarray","localSign","msgHash","tssShareIndex","torusNodeTSSEndpoints","nodeDetailManager","getNodeDetails","verifier","verifierId","tssNonce","getTssNonce","sessionId","getTSSPubKey","tssNonces","participatingServerDKGIndexes","randomSessionNonce","Date","now","tssImportUrl","currentSession","tss","isNodejsOrRN","uxMode","tssLib","default","sockets","Promise","all","setupSockets","share","getDKLSCoeff","umod","curve","getSigningSignatures","client","Client","serverCoeffs","serverIndex","precompute","server_coeffs","ready","catch","err","cleanup","recoveryParam","sign","v","chainConfig","web3AuthClientId","enableLogging","log","enableAll","setLevel","web3AuthNetwork","sessionTime","UX_MODE","REDIRECT","redirectPathName","baseUrl","location","disableHashedFactorKey","hashedFactorNonce","_storageBaseKey","sessionManager","OpenloginSessionManager","NodeDetailManager","network","provider","_this$privKeyProvider","privKeyProvider","_this$state","metadataKey","_this$state2","oAuthKey","status","privKey","LOGGED_IN","REQUIRED_SHARE","INITIALIZED","NOT_INITIALIZED","e","_this$state$userInfo","_this$state3","userInfo","aggregateVerifier","_this$state4","isRedirectMode","_window2","_window3","handleRedirectResult","resetState","rehydrate","nodeDetails","torusSp","TorusServiceProvider","useTSS","customAuthArgs","locationReplaceOnRedirect","nodeEndpoints","torusNodeEndpoints","nodePubKeys","torusNodePub","X","Y","storageLayer","TorusStorageLayer","hostUrl","shareSerializationModule","ThresholdKey","modules","shareSerialization","init","skipSw","skipPrefetch","POPUP","rehydrateSession","setupProvider","tkeyServiceProvider","aggregateParams","subVerifierDetails","loginResponse","triggerLogin","updateState","_getOAuthKey","_getSignatures","sessionData","sessionTokenData","subVerifierDetailsArray","triggerAggregateLogin","aggregateVerifierType","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","verifierIdentifier","aggregateVerifierIdentifier","setupTkey","CoreError","code","message","idTokenLoginParams","idToken","subVerifier","customAuthInstance","getAggregateTorusKey","extraVerifierParams","verifierType","getTorusKey","verifier_id","additionalParams","oAuthShare","verifierName","getRedirectResult","method","TORUS_METHOD","TRIGGER_LOGIN","data","getUserInfo","TRIGGER_AGGREGATE_LOGIN","factorKeyMetadata","getFactorKeyMetadata","inputShareStoreSafe","reconstructKey","finalizeTkey","getCurrentFactorKey","getTssPublicKey","getTSSPub","enableMFAParams","recoveryFactor","hashedFactorKey","checkIfFactorKeyValid","_localMetadataTransitions","browserData","browserName","browserVersion","deviceName","browserInfo","bowser","navigator","userAgent","browser","name","version","os","deviceFactorKey","hashedFactorPub","deleteMetadataShareBackup","createFactorParams","Other","getTssFactorPub","copyOrCreateShare","backupMetadataShare","addFactorDescription","fpp","stateFpp","factorPubHex","keyDesc","getShareDescription","_this$tKey","deleteShareDescription","desc","invalidateSession","tkeyDetails","factors","requiredFactors","requiredShares","threshold","totalFactors","shareDescriptions","metadataPubKey","syncLocalMetadataTransitions","tssKey","newTSSIndex","tssKeyBN","importTssKey","tag","importKey","_UNSAFE_exportTssKey","isMetadataPresent","initialize","neverInitializeNewKey","deviceTSSShare","deviceTSSIndex","HashedShare","createSession","authorizeSession","generateRandomSessionKey","payload","_this$tKey2","privateKeyBN","keys","_this$tKey3","info","_this$tKey4","ShareStore","factorEncs","userEnc","encrypt","serverEncs","addTSSData","_this$tKey5","_this$tKey6","polyId","getLatestPublicPolynomial","getPolynomialID","shares","_this$tkey","_this$tkey2","addLocalMetadataTransitions","input","SHARE_DELETED","dateAdded","_this$tKey7","_this$tkey3","_this$tkey4","metadataShare","getMetadataShare","_this$tKey8","addShareDescription","signingProvider","EthereumSigningProvider","config","newState","TorusUtils","session","sig","signature"],"sourceRoot":""}